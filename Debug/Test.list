
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003050  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  080031e0  080031e0  000131e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800326c  0800326c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800326c  0800326c  0001326c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003274  08003274  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003274  08003274  00013274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003278  08003278  00013278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800327c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000000a4  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000114  20000114  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005f12  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001475  00000000  00000000  00025fb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005d8  00000000  00000000  00027428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000520  00000000  00000000  00027a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020a8c  00000000  00000000  00027f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000705a  00000000  00000000  000489ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd3bf  00000000  00000000  0004fa06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011cdc5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000019a4  00000000  00000000  0011ce18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080031c8 	.word	0x080031c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080031c8 	.word	0x080031c8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <Read_ADC>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t Read_ADC(){
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8000588:	480b      	ldr	r0, [pc, #44]	; (80005b8 <Read_ADC+0x34>)
 800058a:	f000 fbe5 	bl	8000d58 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100000) == HAL_OK){
 800058e:	490b      	ldr	r1, [pc, #44]	; (80005bc <Read_ADC+0x38>)
 8000590:	4809      	ldr	r0, [pc, #36]	; (80005b8 <Read_ADC+0x34>)
 8000592:	f000 fce6 	bl	8000f62 <HAL_ADC_PollForConversion>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d106      	bne.n	80005aa <Read_ADC+0x26>
		adc_value = HAL_ADC_GetValue(&hadc1);
 800059c:	4806      	ldr	r0, [pc, #24]	; (80005b8 <Read_ADC+0x34>)
 800059e:	f000 fd6b 	bl	8001078 <HAL_ADC_GetValue>
 80005a2:	4603      	mov	r3, r0
 80005a4:	b29a      	uxth	r2, r3
 80005a6:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <Read_ADC+0x3c>)
 80005a8:	801a      	strh	r2, [r3, #0]
	}
	HAL_ADC_Stop(&hadc1);
 80005aa:	4803      	ldr	r0, [pc, #12]	; (80005b8 <Read_ADC+0x34>)
 80005ac:	f000 fca6 	bl	8000efc <HAL_ADC_Stop>
}
 80005b0:	bf00      	nop
 80005b2:	4618      	mov	r0, r3
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	2000008c 	.word	0x2000008c
 80005bc:	000186a0 	.word	0x000186a0
 80005c0:	200000d8 	.word	0x200000d8

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ca:	f000 faeb 	bl	8000ba4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ce:	f000 f89b 	bl	8000708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d2:	f000 f955 	bl	8000880 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005d6:	f000 f901 	bl	80007dc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  lcd16x2_init_4bits(RS_GPIO_Port, RS_Pin, E_Pin, D4_GPIO_Port, D4_Pin, D5_Pin, D6_Pin, D7_Pin);
 80005da:	2380      	movs	r3, #128	; 0x80
 80005dc:	9303      	str	r3, [sp, #12]
 80005de:	2340      	movs	r3, #64	; 0x40
 80005e0:	9302      	str	r3, [sp, #8]
 80005e2:	2320      	movs	r3, #32
 80005e4:	9301      	str	r3, [sp, #4]
 80005e6:	2310      	movs	r3, #16
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	4b3c      	ldr	r3, [pc, #240]	; (80006dc <main+0x118>)
 80005ec:	2210      	movs	r2, #16
 80005ee:	2108      	movs	r1, #8
 80005f0:	483b      	ldr	r0, [pc, #236]	; (80006e0 <main+0x11c>)
 80005f2:	f002 f84b 	bl	800268c <lcd16x2_init_4bits>
  lcd16x2_cursorShow(false);
 80005f6:	2000      	movs	r0, #0
 80005f8:	f002 f8e4 	bl	80027c4 <lcd16x2_cursorShow>
  lcd16x2_printf("ATESLEME SISTEMI");
 80005fc:	4839      	ldr	r0, [pc, #228]	; (80006e4 <main+0x120>)
 80005fe:	f002 f913 	bl	8002828 <lcd16x2_printf>
  lcd16x2_2ndLine();
 8000602:	f002 f8d7 	bl	80027b4 <lcd16x2_2ndLine>
  lcd16x2_printf("      MUSA");
 8000606:	4838      	ldr	r0, [pc, #224]	; (80006e8 <main+0x124>)
 8000608:	f002 f90e 	bl	8002828 <lcd16x2_printf>


  HAL_Delay(1000);
 800060c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000610:	f000 fb3a 	bl	8000c88 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Read_ADC();
 8000614:	f7ff ffb6 	bl	8000584 <Read_ADC>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12  , GPIO_PIN_SET);
 8000618:	2201      	movs	r2, #1
 800061a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800061e:	482f      	ldr	r0, [pc, #188]	; (80006dc <main+0x118>)
 8000620:	f001 f9d8 	bl	80019d4 <HAL_GPIO_WritePin>
	  fire_angle = 30* adc_value /4095;
 8000624:	4b31      	ldr	r3, [pc, #196]	; (80006ec <main+0x128>)
 8000626:	881b      	ldrh	r3, [r3, #0]
 8000628:	461a      	mov	r2, r3
 800062a:	4613      	mov	r3, r2
 800062c:	011b      	lsls	r3, r3, #4
 800062e:	1a9b      	subs	r3, r3, r2
 8000630:	005b      	lsls	r3, r3, #1
 8000632:	4a2f      	ldr	r2, [pc, #188]	; (80006f0 <main+0x12c>)
 8000634:	fb82 1203 	smull	r1, r2, r2, r3
 8000638:	441a      	add	r2, r3
 800063a:	12d2      	asrs	r2, r2, #11
 800063c:	17db      	asrs	r3, r3, #31
 800063e:	1ad3      	subs	r3, r2, r3
 8000640:	b29a      	uxth	r2, r3
 8000642:	4b2c      	ldr	r3, [pc, #176]	; (80006f4 <main+0x130>)
 8000644:	801a      	strh	r2, [r3, #0]

	  if (angle == 360) angle = 0;
 8000646:	4b2c      	ldr	r3, [pc, #176]	; (80006f8 <main+0x134>)
 8000648:	881b      	ldrh	r3, [r3, #0]
 800064a:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800064e:	d102      	bne.n	8000656 <main+0x92>
 8000650:	4b29      	ldr	r3, [pc, #164]	; (80006f8 <main+0x134>)
 8000652:	2200      	movs	r2, #0
 8000654:	801a      	strh	r2, [r3, #0]

	  if(angle == fire_angle){
 8000656:	4b28      	ldr	r3, [pc, #160]	; (80006f8 <main+0x134>)
 8000658:	881a      	ldrh	r2, [r3, #0]
 800065a:	4b26      	ldr	r3, [pc, #152]	; (80006f4 <main+0x130>)
 800065c:	881b      	ldrh	r3, [r3, #0]
 800065e:	429a      	cmp	r2, r3
 8000660:	d11f      	bne.n	80006a2 <main+0xde>
		  lcd16x2_clear();
 8000662:	f002 f8d7 	bl	8002814 <lcd16x2_clear>
		  lcd16x2_printf("ATESS");
 8000666:	4825      	ldr	r0, [pc, #148]	; (80006fc <main+0x138>)
 8000668:	f002 f8de 	bl	8002828 <lcd16x2_printf>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13 , GPIO_PIN_SET);
 800066c:	2201      	movs	r2, #1
 800066e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000672:	481a      	ldr	r0, [pc, #104]	; (80006dc <main+0x118>)
 8000674:	f001 f9ae 	bl	80019d4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12  , GPIO_PIN_RESET);
 8000678:	2200      	movs	r2, #0
 800067a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800067e:	4817      	ldr	r0, [pc, #92]	; (80006dc <main+0x118>)
 8000680:	f001 f9a8 	bl	80019d4 <HAL_GPIO_WritePin>
		  HAL_Delay(250);
 8000684:	20fa      	movs	r0, #250	; 0xfa
 8000686:	f000 faff 	bl	8000c88 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 , GPIO_PIN_SET);
 800068a:	2201      	movs	r2, #1
 800068c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000690:	4812      	ldr	r0, [pc, #72]	; (80006dc <main+0x118>)
 8000692:	f001 f99f 	bl	80019d4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13  , GPIO_PIN_RESET);
 8000696:	2200      	movs	r2, #0
 8000698:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800069c:	480f      	ldr	r0, [pc, #60]	; (80006dc <main+0x118>)
 800069e:	f001 f999 	bl	80019d4 <HAL_GPIO_WritePin>
	  }
	  lcd16x2_1stLine();
 80006a2:	f002 f87f 	bl	80027a4 <lcd16x2_1stLine>
	  lcd16x2_printf("Krank Acisi %d",angle);
 80006a6:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <main+0x134>)
 80006a8:	881b      	ldrh	r3, [r3, #0]
 80006aa:	4619      	mov	r1, r3
 80006ac:	4814      	ldr	r0, [pc, #80]	; (8000700 <main+0x13c>)
 80006ae:	f002 f8bb 	bl	8002828 <lcd16x2_printf>
	  lcd16x2_2ndLine();
 80006b2:	f002 f87f 	bl	80027b4 <lcd16x2_2ndLine>
	  lcd16x2_printf("Avans Aci %d",fire_angle);
 80006b6:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <main+0x130>)
 80006b8:	881b      	ldrh	r3, [r3, #0]
 80006ba:	4619      	mov	r1, r3
 80006bc:	4811      	ldr	r0, [pc, #68]	; (8000704 <main+0x140>)
 80006be:	f002 f8b3 	bl	8002828 <lcd16x2_printf>
	  HAL_Delay(40);
 80006c2:	2028      	movs	r0, #40	; 0x28
 80006c4:	f000 fae0 	bl	8000c88 <HAL_Delay>
	  angle+=2;
 80006c8:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <main+0x134>)
 80006ca:	881b      	ldrh	r3, [r3, #0]
 80006cc:	3302      	adds	r3, #2
 80006ce:	b29a      	uxth	r2, r3
 80006d0:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <main+0x134>)
 80006d2:	801a      	strh	r2, [r3, #0]
	  lcd16x2_clear();
 80006d4:	f002 f89e 	bl	8002814 <lcd16x2_clear>
	  Read_ADC();
 80006d8:	e79c      	b.n	8000614 <main+0x50>
 80006da:	bf00      	nop
 80006dc:	40020c00 	.word	0x40020c00
 80006e0:	40020400 	.word	0x40020400
 80006e4:	080031e0 	.word	0x080031e0
 80006e8:	080031f4 	.word	0x080031f4
 80006ec:	200000d8 	.word	0x200000d8
 80006f0:	80080081 	.word	0x80080081
 80006f4:	200000d6 	.word	0x200000d6
 80006f8:	200000d4 	.word	0x200000d4
 80006fc:	08003200 	.word	0x08003200
 8000700:	08003208 	.word	0x08003208
 8000704:	08003218 	.word	0x08003218

08000708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b094      	sub	sp, #80	; 0x50
 800070c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070e:	f107 0320 	add.w	r3, r7, #32
 8000712:	2230      	movs	r2, #48	; 0x30
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f002 f8e0 	bl	80028dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071c:	f107 030c 	add.w	r3, r7, #12
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800072c:	2300      	movs	r3, #0
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	4b28      	ldr	r3, [pc, #160]	; (80007d4 <SystemClock_Config+0xcc>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000734:	4a27      	ldr	r2, [pc, #156]	; (80007d4 <SystemClock_Config+0xcc>)
 8000736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800073a:	6413      	str	r3, [r2, #64]	; 0x40
 800073c:	4b25      	ldr	r3, [pc, #148]	; (80007d4 <SystemClock_Config+0xcc>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000744:	60bb      	str	r3, [r7, #8]
 8000746:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000748:	2300      	movs	r3, #0
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	4b22      	ldr	r3, [pc, #136]	; (80007d8 <SystemClock_Config+0xd0>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a21      	ldr	r2, [pc, #132]	; (80007d8 <SystemClock_Config+0xd0>)
 8000752:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000756:	6013      	str	r3, [r2, #0]
 8000758:	4b1f      	ldr	r3, [pc, #124]	; (80007d8 <SystemClock_Config+0xd0>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000764:	2301      	movs	r3, #1
 8000766:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000768:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800076c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076e:	2302      	movs	r3, #2
 8000770:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000772:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000776:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000778:	2304      	movs	r3, #4
 800077a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800077c:	23a8      	movs	r3, #168	; 0xa8
 800077e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000780:	2302      	movs	r3, #2
 8000782:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000784:	2304      	movs	r3, #4
 8000786:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000788:	f107 0320 	add.w	r3, r7, #32
 800078c:	4618      	mov	r0, r3
 800078e:	f001 f93b 	bl	8001a08 <HAL_RCC_OscConfig>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000798:	f000 f8f6 	bl	8000988 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079c:	230f      	movs	r3, #15
 800079e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a0:	2302      	movs	r3, #2
 80007a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007b4:	f107 030c 	add.w	r3, r7, #12
 80007b8:	2105      	movs	r1, #5
 80007ba:	4618      	mov	r0, r3
 80007bc:	f001 fb9c 	bl	8001ef8 <HAL_RCC_ClockConfig>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007c6:	f000 f8df 	bl	8000988 <Error_Handler>
  }
}
 80007ca:	bf00      	nop
 80007cc:	3750      	adds	r7, #80	; 0x50
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40007000 	.word	0x40007000

080007dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007e2:	463b      	mov	r3, r7
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007ee:	4b21      	ldr	r3, [pc, #132]	; (8000874 <MX_ADC1_Init+0x98>)
 80007f0:	4a21      	ldr	r2, [pc, #132]	; (8000878 <MX_ADC1_Init+0x9c>)
 80007f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007f4:	4b1f      	ldr	r3, [pc, #124]	; (8000874 <MX_ADC1_Init+0x98>)
 80007f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007fc:	4b1d      	ldr	r3, [pc, #116]	; (8000874 <MX_ADC1_Init+0x98>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000802:	4b1c      	ldr	r3, [pc, #112]	; (8000874 <MX_ADC1_Init+0x98>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000808:	4b1a      	ldr	r3, [pc, #104]	; (8000874 <MX_ADC1_Init+0x98>)
 800080a:	2200      	movs	r2, #0
 800080c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800080e:	4b19      	ldr	r3, [pc, #100]	; (8000874 <MX_ADC1_Init+0x98>)
 8000810:	2200      	movs	r2, #0
 8000812:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000816:	4b17      	ldr	r3, [pc, #92]	; (8000874 <MX_ADC1_Init+0x98>)
 8000818:	2200      	movs	r2, #0
 800081a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800081c:	4b15      	ldr	r3, [pc, #84]	; (8000874 <MX_ADC1_Init+0x98>)
 800081e:	4a17      	ldr	r2, [pc, #92]	; (800087c <MX_ADC1_Init+0xa0>)
 8000820:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000822:	4b14      	ldr	r3, [pc, #80]	; (8000874 <MX_ADC1_Init+0x98>)
 8000824:	2200      	movs	r2, #0
 8000826:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000828:	4b12      	ldr	r3, [pc, #72]	; (8000874 <MX_ADC1_Init+0x98>)
 800082a:	2201      	movs	r2, #1
 800082c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800082e:	4b11      	ldr	r3, [pc, #68]	; (8000874 <MX_ADC1_Init+0x98>)
 8000830:	2200      	movs	r2, #0
 8000832:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000836:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <MX_ADC1_Init+0x98>)
 8000838:	2201      	movs	r2, #1
 800083a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800083c:	480d      	ldr	r0, [pc, #52]	; (8000874 <MX_ADC1_Init+0x98>)
 800083e:	f000 fa47 	bl	8000cd0 <HAL_ADC_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000848:	f000 f89e 	bl	8000988 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800084c:	2307      	movs	r3, #7
 800084e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000850:	2301      	movs	r3, #1
 8000852:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000854:	2300      	movs	r3, #0
 8000856:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000858:	463b      	mov	r3, r7
 800085a:	4619      	mov	r1, r3
 800085c:	4805      	ldr	r0, [pc, #20]	; (8000874 <MX_ADC1_Init+0x98>)
 800085e:	f000 fc19 	bl	8001094 <HAL_ADC_ConfigChannel>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000868:	f000 f88e 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800086c:	bf00      	nop
 800086e:	3710      	adds	r7, #16
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	2000008c 	.word	0x2000008c
 8000878:	40012000 	.word	0x40012000
 800087c:	0f000001 	.word	0x0f000001

08000880 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08a      	sub	sp, #40	; 0x28
 8000884:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000886:	f107 0314 	add.w	r3, r7, #20
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
 8000894:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	613b      	str	r3, [r7, #16]
 800089a:	4b38      	ldr	r3, [pc, #224]	; (800097c <MX_GPIO_Init+0xfc>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a37      	ldr	r2, [pc, #220]	; (800097c <MX_GPIO_Init+0xfc>)
 80008a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b35      	ldr	r3, [pc, #212]	; (800097c <MX_GPIO_Init+0xfc>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ae:	613b      	str	r3, [r7, #16]
 80008b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	60fb      	str	r3, [r7, #12]
 80008b6:	4b31      	ldr	r3, [pc, #196]	; (800097c <MX_GPIO_Init+0xfc>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a30      	ldr	r2, [pc, #192]	; (800097c <MX_GPIO_Init+0xfc>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b2e      	ldr	r3, [pc, #184]	; (800097c <MX_GPIO_Init+0xfc>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	60bb      	str	r3, [r7, #8]
 80008d2:	4b2a      	ldr	r3, [pc, #168]	; (800097c <MX_GPIO_Init+0xfc>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a29      	ldr	r2, [pc, #164]	; (800097c <MX_GPIO_Init+0xfc>)
 80008d8:	f043 0308 	orr.w	r3, r3, #8
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b27      	ldr	r3, [pc, #156]	; (800097c <MX_GPIO_Init+0xfc>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0308 	and.w	r3, r3, #8
 80008e6:	60bb      	str	r3, [r7, #8]
 80008e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	4b23      	ldr	r3, [pc, #140]	; (800097c <MX_GPIO_Init+0xfc>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a22      	ldr	r2, [pc, #136]	; (800097c <MX_GPIO_Init+0xfc>)
 80008f4:	f043 0302 	orr.w	r3, r3, #2
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b20      	ldr	r3, [pc, #128]	; (800097c <MX_GPIO_Init+0xfc>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0302 	and.w	r3, r3, #2
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000906:	2200      	movs	r2, #0
 8000908:	f24f 01ff 	movw	r1, #61695	; 0xf0ff
 800090c:	481c      	ldr	r0, [pc, #112]	; (8000980 <MX_GPIO_Init+0x100>)
 800090e:	f001 f861 	bl	80019d4 <HAL_GPIO_WritePin>
                          |D0_Pin|D1_Pin|D2_Pin|D3_Pin
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RS_Pin|E_Pin, GPIO_PIN_RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	2118      	movs	r1, #24
 8000916:	481b      	ldr	r0, [pc, #108]	; (8000984 <MX_GPIO_Init+0x104>)
 8000918:	f001 f85c 	bl	80019d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800091c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000920:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000922:	2301      	movs	r3, #1
 8000924:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800092a:	2303      	movs	r3, #3
 800092c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800092e:	f107 0314 	add.w	r3, r7, #20
 8000932:	4619      	mov	r1, r3
 8000934:	4812      	ldr	r0, [pc, #72]	; (8000980 <MX_GPIO_Init+0x100>)
 8000936:	f000 feb1 	bl	800169c <HAL_GPIO_Init>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin
                           D4_Pin D5_Pin D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 800093a:	23ff      	movs	r3, #255	; 0xff
 800093c:	617b      	str	r3, [r7, #20]
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093e:	2301      	movs	r3, #1
 8000940:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000946:	2301      	movs	r3, #1
 8000948:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800094a:	f107 0314 	add.w	r3, r7, #20
 800094e:	4619      	mov	r1, r3
 8000950:	480b      	ldr	r0, [pc, #44]	; (8000980 <MX_GPIO_Init+0x100>)
 8000952:	f000 fea3 	bl	800169c <HAL_GPIO_Init>

  /*Configure GPIO pins : RS_Pin E_Pin */
  GPIO_InitStruct.Pin = RS_Pin|E_Pin;
 8000956:	2318      	movs	r3, #24
 8000958:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095a:	2301      	movs	r3, #1
 800095c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000962:	2301      	movs	r3, #1
 8000964:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000966:	f107 0314 	add.w	r3, r7, #20
 800096a:	4619      	mov	r1, r3
 800096c:	4805      	ldr	r0, [pc, #20]	; (8000984 <MX_GPIO_Init+0x104>)
 800096e:	f000 fe95 	bl	800169c <HAL_GPIO_Init>

}
 8000972:	bf00      	nop
 8000974:	3728      	adds	r7, #40	; 0x28
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40023800 	.word	0x40023800
 8000980:	40020c00 	.word	0x40020c00
 8000984:	40020400 	.word	0x40020400

08000988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800098c:	b672      	cpsid	i
}
 800098e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000990:	e7fe      	b.n	8000990 <Error_Handler+0x8>
	...

08000994 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <HAL_MspInit+0x4c>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a2:	4a0f      	ldr	r2, [pc, #60]	; (80009e0 <HAL_MspInit+0x4c>)
 80009a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a8:	6453      	str	r3, [r2, #68]	; 0x44
 80009aa:	4b0d      	ldr	r3, [pc, #52]	; (80009e0 <HAL_MspInit+0x4c>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	603b      	str	r3, [r7, #0]
 80009ba:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <HAL_MspInit+0x4c>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009be:	4a08      	ldr	r2, [pc, #32]	; (80009e0 <HAL_MspInit+0x4c>)
 80009c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c4:	6413      	str	r3, [r2, #64]	; 0x40
 80009c6:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <HAL_MspInit+0x4c>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ce:	603b      	str	r3, [r7, #0]
 80009d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d2:	bf00      	nop
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	40023800 	.word	0x40023800

080009e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08a      	sub	sp, #40	; 0x28
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a17      	ldr	r2, [pc, #92]	; (8000a60 <HAL_ADC_MspInit+0x7c>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d127      	bne.n	8000a56 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	613b      	str	r3, [r7, #16]
 8000a0a:	4b16      	ldr	r3, [pc, #88]	; (8000a64 <HAL_ADC_MspInit+0x80>)
 8000a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0e:	4a15      	ldr	r2, [pc, #84]	; (8000a64 <HAL_ADC_MspInit+0x80>)
 8000a10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a14:	6453      	str	r3, [r2, #68]	; 0x44
 8000a16:	4b13      	ldr	r3, [pc, #76]	; (8000a64 <HAL_ADC_MspInit+0x80>)
 8000a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <HAL_ADC_MspInit+0x80>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a0e      	ldr	r2, [pc, #56]	; (8000a64 <HAL_ADC_MspInit+0x80>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <HAL_ADC_MspInit+0x80>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a3e:	2380      	movs	r3, #128	; 0x80
 8000a40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a42:	2303      	movs	r3, #3
 8000a44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4a:	f107 0314 	add.w	r3, r7, #20
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4805      	ldr	r0, [pc, #20]	; (8000a68 <HAL_ADC_MspInit+0x84>)
 8000a52:	f000 fe23 	bl	800169c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a56:	bf00      	nop
 8000a58:	3728      	adds	r7, #40	; 0x28
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40012000 	.word	0x40012000
 8000a64:	40023800 	.word	0x40023800
 8000a68:	40020000 	.word	0x40020000

08000a6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <NMI_Handler+0x4>

08000a72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a76:	e7fe      	b.n	8000a76 <HardFault_Handler+0x4>

08000a78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <MemManage_Handler+0x4>

08000a7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a82:	e7fe      	b.n	8000a82 <BusFault_Handler+0x4>

08000a84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <UsageFault_Handler+0x4>

08000a8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr

08000aa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab8:	f000 f8c6 	bl	8000c48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ac8:	4a14      	ldr	r2, [pc, #80]	; (8000b1c <_sbrk+0x5c>)
 8000aca:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <_sbrk+0x60>)
 8000acc:	1ad3      	subs	r3, r2, r3
 8000ace:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ad4:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <_sbrk+0x64>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d102      	bne.n	8000ae2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000adc:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <_sbrk+0x64>)
 8000ade:	4a12      	ldr	r2, [pc, #72]	; (8000b28 <_sbrk+0x68>)
 8000ae0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <_sbrk+0x64>)
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4413      	add	r3, r2
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d207      	bcs.n	8000b00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000af0:	f001 feca 	bl	8002888 <__errno>
 8000af4:	4603      	mov	r3, r0
 8000af6:	220c      	movs	r2, #12
 8000af8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000afa:	f04f 33ff 	mov.w	r3, #4294967295
 8000afe:	e009      	b.n	8000b14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b00:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <_sbrk+0x64>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b06:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <_sbrk+0x64>)
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	4a05      	ldr	r2, [pc, #20]	; (8000b24 <_sbrk+0x64>)
 8000b10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b12:	68fb      	ldr	r3, [r7, #12]
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3718      	adds	r7, #24
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20020000 	.word	0x20020000
 8000b20:	00000400 	.word	0x00000400
 8000b24:	200000dc 	.word	0x200000dc
 8000b28:	20000118 	.word	0x20000118

08000b2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <SystemInit+0x20>)
 8000b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b36:	4a05      	ldr	r2, [pc, #20]	; (8000b4c <SystemInit+0x20>)
 8000b38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b54:	480d      	ldr	r0, [pc, #52]	; (8000b8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b56:	490e      	ldr	r1, [pc, #56]	; (8000b90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b58:	4a0e      	ldr	r2, [pc, #56]	; (8000b94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b5c:	e002      	b.n	8000b64 <LoopCopyDataInit>

08000b5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b62:	3304      	adds	r3, #4

08000b64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b68:	d3f9      	bcc.n	8000b5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b6a:	4a0b      	ldr	r2, [pc, #44]	; (8000b98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b6c:	4c0b      	ldr	r4, [pc, #44]	; (8000b9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b70:	e001      	b.n	8000b76 <LoopFillZerobss>

08000b72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b74:	3204      	adds	r2, #4

08000b76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b78:	d3fb      	bcc.n	8000b72 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b7a:	f7ff ffd7 	bl	8000b2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b7e:	f001 fe89 	bl	8002894 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b82:	f7ff fd1f 	bl	80005c4 <main>
  bx  lr    
 8000b86:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b90:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b94:	0800327c 	.word	0x0800327c
  ldr r2, =_sbss
 8000b98:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b9c:	20000114 	.word	0x20000114

08000ba0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ba0:	e7fe      	b.n	8000ba0 <ADC_IRQHandler>
	...

08000ba4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ba8:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <HAL_Init+0x40>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a0d      	ldr	r2, [pc, #52]	; (8000be4 <HAL_Init+0x40>)
 8000bae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bb4:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <HAL_Init+0x40>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a0a      	ldr	r2, [pc, #40]	; (8000be4 <HAL_Init+0x40>)
 8000bba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc0:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <HAL_Init+0x40>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a07      	ldr	r2, [pc, #28]	; (8000be4 <HAL_Init+0x40>)
 8000bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bcc:	2003      	movs	r0, #3
 8000bce:	f000 fd31 	bl	8001634 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bd2:	200f      	movs	r0, #15
 8000bd4:	f000 f808 	bl	8000be8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bd8:	f7ff fedc 	bl	8000994 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40023c00 	.word	0x40023c00

08000be8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bf0:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <HAL_InitTick+0x54>)
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <HAL_InitTick+0x58>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c06:	4618      	mov	r0, r3
 8000c08:	f000 fd3b 	bl	8001682 <HAL_SYSTICK_Config>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	e00e      	b.n	8000c34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2b0f      	cmp	r3, #15
 8000c1a:	d80a      	bhi.n	8000c32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	6879      	ldr	r1, [r7, #4]
 8000c20:	f04f 30ff 	mov.w	r0, #4294967295
 8000c24:	f000 fd11 	bl	800164a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c28:	4a06      	ldr	r2, [pc, #24]	; (8000c44 <HAL_InitTick+0x5c>)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	e000      	b.n	8000c34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20000000 	.word	0x20000000
 8000c40:	20000008 	.word	0x20000008
 8000c44:	20000004 	.word	0x20000004

08000c48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <HAL_IncTick+0x20>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	461a      	mov	r2, r3
 8000c52:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <HAL_IncTick+0x24>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4413      	add	r3, r2
 8000c58:	4a04      	ldr	r2, [pc, #16]	; (8000c6c <HAL_IncTick+0x24>)
 8000c5a:	6013      	str	r3, [r2, #0]
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	20000008 	.word	0x20000008
 8000c6c:	200000e0 	.word	0x200000e0

08000c70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  return uwTick;
 8000c74:	4b03      	ldr	r3, [pc, #12]	; (8000c84 <HAL_GetTick+0x14>)
 8000c76:	681b      	ldr	r3, [r3, #0]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	200000e0 	.word	0x200000e0

08000c88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c90:	f7ff ffee 	bl	8000c70 <HAL_GetTick>
 8000c94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ca0:	d005      	beq.n	8000cae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ca2:	4b0a      	ldr	r3, [pc, #40]	; (8000ccc <HAL_Delay+0x44>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	4413      	add	r3, r2
 8000cac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cae:	bf00      	nop
 8000cb0:	f7ff ffde 	bl	8000c70 <HAL_GetTick>
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	68fa      	ldr	r2, [r7, #12]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d8f7      	bhi.n	8000cb0 <HAL_Delay+0x28>
  {
  }
}
 8000cc0:	bf00      	nop
 8000cc2:	bf00      	nop
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000008 	.word	0x20000008

08000cd0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d101      	bne.n	8000ce6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e033      	b.n	8000d4e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d109      	bne.n	8000d02 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f7ff fe78 	bl	80009e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d06:	f003 0310 	and.w	r3, r3, #16
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d118      	bne.n	8000d40 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d12:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d16:	f023 0302 	bic.w	r3, r3, #2
 8000d1a:	f043 0202 	orr.w	r2, r3, #2
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f000 fad8 	bl	80012d8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d32:	f023 0303 	bic.w	r3, r3, #3
 8000d36:	f043 0201 	orr.w	r2, r3, #1
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	641a      	str	r2, [r3, #64]	; 0x40
 8000d3e:	e001      	b.n	8000d44 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000d40:	2301      	movs	r3, #1
 8000d42:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2200      	movs	r2, #0
 8000d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
	...

08000d58 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000d60:	2300      	movs	r3, #0
 8000d62:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d101      	bne.n	8000d72 <HAL_ADC_Start+0x1a>
 8000d6e:	2302      	movs	r3, #2
 8000d70:	e0b2      	b.n	8000ed8 <HAL_ADC_Start+0x180>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2201      	movs	r2, #1
 8000d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	f003 0301 	and.w	r3, r3, #1
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d018      	beq.n	8000dba <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	689a      	ldr	r2, [r3, #8]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f042 0201 	orr.w	r2, r2, #1
 8000d96:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000d98:	4b52      	ldr	r3, [pc, #328]	; (8000ee4 <HAL_ADC_Start+0x18c>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a52      	ldr	r2, [pc, #328]	; (8000ee8 <HAL_ADC_Start+0x190>)
 8000d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000da2:	0c9a      	lsrs	r2, r3, #18
 8000da4:	4613      	mov	r3, r2
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	4413      	add	r3, r2
 8000daa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000dac:	e002      	b.n	8000db4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	3b01      	subs	r3, #1
 8000db2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d1f9      	bne.n	8000dae <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	f003 0301 	and.w	r3, r3, #1
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d17a      	bne.n	8000ebe <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dcc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000dd0:	f023 0301 	bic.w	r3, r3, #1
 8000dd4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d007      	beq.n	8000dfa <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000df2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e06:	d106      	bne.n	8000e16 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0c:	f023 0206 	bic.w	r2, r3, #6
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	645a      	str	r2, [r3, #68]	; 0x44
 8000e14:	e002      	b.n	8000e1c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2200      	movs	r2, #0
 8000e1a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000e24:	4b31      	ldr	r3, [pc, #196]	; (8000eec <HAL_ADC_Start+0x194>)
 8000e26:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000e30:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f003 031f 	and.w	r3, r3, #31
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d12a      	bne.n	8000e94 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a2b      	ldr	r2, [pc, #172]	; (8000ef0 <HAL_ADC_Start+0x198>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d015      	beq.n	8000e74 <HAL_ADC_Start+0x11c>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a29      	ldr	r2, [pc, #164]	; (8000ef4 <HAL_ADC_Start+0x19c>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d105      	bne.n	8000e5e <HAL_ADC_Start+0x106>
 8000e52:	4b26      	ldr	r3, [pc, #152]	; (8000eec <HAL_ADC_Start+0x194>)
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f003 031f 	and.w	r3, r3, #31
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d00a      	beq.n	8000e74 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a25      	ldr	r2, [pc, #148]	; (8000ef8 <HAL_ADC_Start+0x1a0>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d136      	bne.n	8000ed6 <HAL_ADC_Start+0x17e>
 8000e68:	4b20      	ldr	r3, [pc, #128]	; (8000eec <HAL_ADC_Start+0x194>)
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f003 0310 	and.w	r3, r3, #16
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d130      	bne.n	8000ed6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d129      	bne.n	8000ed6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	689a      	ldr	r2, [r3, #8]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000e90:	609a      	str	r2, [r3, #8]
 8000e92:	e020      	b.n	8000ed6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a15      	ldr	r2, [pc, #84]	; (8000ef0 <HAL_ADC_Start+0x198>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d11b      	bne.n	8000ed6 <HAL_ADC_Start+0x17e>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d114      	bne.n	8000ed6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	689a      	ldr	r2, [r3, #8]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	e00b      	b.n	8000ed6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec2:	f043 0210 	orr.w	r2, r3, #16
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ece:	f043 0201 	orr.w	r2, r3, #1
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000ed6:	2300      	movs	r3, #0
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3714      	adds	r7, #20
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	20000000 	.word	0x20000000
 8000ee8:	431bde83 	.word	0x431bde83
 8000eec:	40012300 	.word	0x40012300
 8000ef0:	40012000 	.word	0x40012000
 8000ef4:	40012100 	.word	0x40012100
 8000ef8:	40012200 	.word	0x40012200

08000efc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d101      	bne.n	8000f12 <HAL_ADC_Stop+0x16>
 8000f0e:	2302      	movs	r3, #2
 8000f10:	e021      	b.n	8000f56 <HAL_ADC_Stop+0x5a>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2201      	movs	r2, #1
 8000f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	689a      	ldr	r2, [r3, #8]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f022 0201 	bic.w	r2, r2, #1
 8000f28:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	f003 0301 	and.w	r3, r3, #1
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d109      	bne.n	8000f4c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f40:	f023 0301 	bic.w	r3, r3, #1
 8000f44:	f043 0201 	orr.w	r2, r3, #1
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b084      	sub	sp, #16
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
 8000f6a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f7e:	d113      	bne.n	8000fa8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000f8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f8e:	d10b      	bne.n	8000fa8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f94:	f043 0220 	orr.w	r2, r3, #32
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e063      	b.n	8001070 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8000fa8:	f7ff fe62 	bl	8000c70 <HAL_GetTick>
 8000fac:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000fae:	e021      	b.n	8000ff4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fb6:	d01d      	beq.n	8000ff4 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d007      	beq.n	8000fce <HAL_ADC_PollForConversion+0x6c>
 8000fbe:	f7ff fe57 	bl	8000c70 <HAL_GetTick>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	683a      	ldr	r2, [r7, #0]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	d212      	bcs.n	8000ff4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f003 0302 	and.w	r3, r3, #2
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d00b      	beq.n	8000ff4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe0:	f043 0204 	orr.w	r2, r3, #4
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	e03d      	b.n	8001070 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d1d6      	bne.n	8000fb0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f06f 0212 	mvn.w	r2, #18
 800100a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001010:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d123      	bne.n	800106e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800102a:	2b00      	cmp	r3, #0
 800102c:	d11f      	bne.n	800106e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001034:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001038:	2b00      	cmp	r3, #0
 800103a:	d006      	beq.n	800104a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001046:	2b00      	cmp	r3, #0
 8001048:	d111      	bne.n	800106e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d105      	bne.n	800106e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001066:	f043 0201 	orr.w	r2, r3, #1
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800106e:	2300      	movs	r3, #0
}
 8001070:	4618      	mov	r0, r3
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001086:	4618      	mov	r0, r3
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
	...

08001094 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800109e:	2300      	movs	r3, #0
 80010a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d101      	bne.n	80010b0 <HAL_ADC_ConfigChannel+0x1c>
 80010ac:	2302      	movs	r3, #2
 80010ae:	e105      	b.n	80012bc <HAL_ADC_ConfigChannel+0x228>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2201      	movs	r2, #1
 80010b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b09      	cmp	r3, #9
 80010be:	d925      	bls.n	800110c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	68d9      	ldr	r1, [r3, #12]
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	461a      	mov	r2, r3
 80010ce:	4613      	mov	r3, r2
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	4413      	add	r3, r2
 80010d4:	3b1e      	subs	r3, #30
 80010d6:	2207      	movs	r2, #7
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	43da      	mvns	r2, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	400a      	ands	r2, r1
 80010e4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	68d9      	ldr	r1, [r3, #12]
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	689a      	ldr	r2, [r3, #8]
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	4618      	mov	r0, r3
 80010f8:	4603      	mov	r3, r0
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	4403      	add	r3, r0
 80010fe:	3b1e      	subs	r3, #30
 8001100:	409a      	lsls	r2, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	430a      	orrs	r2, r1
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	e022      	b.n	8001152 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	6919      	ldr	r1, [r3, #16]
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	b29b      	uxth	r3, r3
 8001118:	461a      	mov	r2, r3
 800111a:	4613      	mov	r3, r2
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	4413      	add	r3, r2
 8001120:	2207      	movs	r2, #7
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43da      	mvns	r2, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	400a      	ands	r2, r1
 800112e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	6919      	ldr	r1, [r3, #16]
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	689a      	ldr	r2, [r3, #8]
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	b29b      	uxth	r3, r3
 8001140:	4618      	mov	r0, r3
 8001142:	4603      	mov	r3, r0
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	4403      	add	r3, r0
 8001148:	409a      	lsls	r2, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	430a      	orrs	r2, r1
 8001150:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	2b06      	cmp	r3, #6
 8001158:	d824      	bhi.n	80011a4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685a      	ldr	r2, [r3, #4]
 8001164:	4613      	mov	r3, r2
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	4413      	add	r3, r2
 800116a:	3b05      	subs	r3, #5
 800116c:	221f      	movs	r2, #31
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43da      	mvns	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	400a      	ands	r2, r1
 800117a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	b29b      	uxth	r3, r3
 8001188:	4618      	mov	r0, r3
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685a      	ldr	r2, [r3, #4]
 800118e:	4613      	mov	r3, r2
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	4413      	add	r3, r2
 8001194:	3b05      	subs	r3, #5
 8001196:	fa00 f203 	lsl.w	r2, r0, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	430a      	orrs	r2, r1
 80011a0:	635a      	str	r2, [r3, #52]	; 0x34
 80011a2:	e04c      	b.n	800123e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	2b0c      	cmp	r3, #12
 80011aa:	d824      	bhi.n	80011f6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685a      	ldr	r2, [r3, #4]
 80011b6:	4613      	mov	r3, r2
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	4413      	add	r3, r2
 80011bc:	3b23      	subs	r3, #35	; 0x23
 80011be:	221f      	movs	r2, #31
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	43da      	mvns	r2, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	400a      	ands	r2, r1
 80011cc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	b29b      	uxth	r3, r3
 80011da:	4618      	mov	r0, r3
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685a      	ldr	r2, [r3, #4]
 80011e0:	4613      	mov	r3, r2
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	4413      	add	r3, r2
 80011e6:	3b23      	subs	r3, #35	; 0x23
 80011e8:	fa00 f203 	lsl.w	r2, r0, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	430a      	orrs	r2, r1
 80011f2:	631a      	str	r2, [r3, #48]	; 0x30
 80011f4:	e023      	b.n	800123e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685a      	ldr	r2, [r3, #4]
 8001200:	4613      	mov	r3, r2
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	4413      	add	r3, r2
 8001206:	3b41      	subs	r3, #65	; 0x41
 8001208:	221f      	movs	r2, #31
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43da      	mvns	r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	400a      	ands	r2, r1
 8001216:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	b29b      	uxth	r3, r3
 8001224:	4618      	mov	r0, r3
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685a      	ldr	r2, [r3, #4]
 800122a:	4613      	mov	r3, r2
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	4413      	add	r3, r2
 8001230:	3b41      	subs	r3, #65	; 0x41
 8001232:	fa00 f203 	lsl.w	r2, r0, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	430a      	orrs	r2, r1
 800123c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800123e:	4b22      	ldr	r3, [pc, #136]	; (80012c8 <HAL_ADC_ConfigChannel+0x234>)
 8001240:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a21      	ldr	r2, [pc, #132]	; (80012cc <HAL_ADC_ConfigChannel+0x238>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d109      	bne.n	8001260 <HAL_ADC_ConfigChannel+0x1cc>
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2b12      	cmp	r3, #18
 8001252:	d105      	bne.n	8001260 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a19      	ldr	r2, [pc, #100]	; (80012cc <HAL_ADC_ConfigChannel+0x238>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d123      	bne.n	80012b2 <HAL_ADC_ConfigChannel+0x21e>
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2b10      	cmp	r3, #16
 8001270:	d003      	beq.n	800127a <HAL_ADC_ConfigChannel+0x1e6>
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2b11      	cmp	r3, #17
 8001278:	d11b      	bne.n	80012b2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2b10      	cmp	r3, #16
 800128c:	d111      	bne.n	80012b2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800128e:	4b10      	ldr	r3, [pc, #64]	; (80012d0 <HAL_ADC_ConfigChannel+0x23c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a10      	ldr	r2, [pc, #64]	; (80012d4 <HAL_ADC_ConfigChannel+0x240>)
 8001294:	fba2 2303 	umull	r2, r3, r2, r3
 8001298:	0c9a      	lsrs	r2, r3, #18
 800129a:	4613      	mov	r3, r2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	4413      	add	r3, r2
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80012a4:	e002      	b.n	80012ac <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	3b01      	subs	r3, #1
 80012aa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d1f9      	bne.n	80012a6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2200      	movs	r2, #0
 80012b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80012ba:	2300      	movs	r3, #0
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3714      	adds	r7, #20
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	40012300 	.word	0x40012300
 80012cc:	40012000 	.word	0x40012000
 80012d0:	20000000 	.word	0x20000000
 80012d4:	431bde83 	.word	0x431bde83

080012d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012e0:	4b79      	ldr	r3, [pc, #484]	; (80014c8 <ADC_Init+0x1f0>)
 80012e2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	685a      	ldr	r2, [r3, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	431a      	orrs	r2, r3
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	685a      	ldr	r2, [r3, #4]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800130c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	6859      	ldr	r1, [r3, #4]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	691b      	ldr	r3, [r3, #16]
 8001318:	021a      	lsls	r2, r3, #8
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	430a      	orrs	r2, r1
 8001320:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	685a      	ldr	r2, [r3, #4]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001330:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	6859      	ldr	r1, [r3, #4]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	689a      	ldr	r2, [r3, #8]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	430a      	orrs	r2, r1
 8001342:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	689a      	ldr	r2, [r3, #8]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001352:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	6899      	ldr	r1, [r3, #8]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	68da      	ldr	r2, [r3, #12]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	430a      	orrs	r2, r1
 8001364:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800136a:	4a58      	ldr	r2, [pc, #352]	; (80014cc <ADC_Init+0x1f4>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d022      	beq.n	80013b6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	689a      	ldr	r2, [r3, #8]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800137e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	6899      	ldr	r1, [r3, #8]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	430a      	orrs	r2, r1
 8001390:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	689a      	ldr	r2, [r3, #8]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	6899      	ldr	r1, [r3, #8]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	430a      	orrs	r2, r1
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	e00f      	b.n	80013d6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	689a      	ldr	r2, [r3, #8]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	689a      	ldr	r2, [r3, #8]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	689a      	ldr	r2, [r3, #8]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f022 0202 	bic.w	r2, r2, #2
 80013e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	6899      	ldr	r1, [r3, #8]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	7e1b      	ldrb	r3, [r3, #24]
 80013f0:	005a      	lsls	r2, r3, #1
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	430a      	orrs	r2, r1
 80013f8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d01b      	beq.n	800143c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	685a      	ldr	r2, [r3, #4]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001412:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	685a      	ldr	r2, [r3, #4]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001422:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	6859      	ldr	r1, [r3, #4]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142e:	3b01      	subs	r3, #1
 8001430:	035a      	lsls	r2, r3, #13
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	430a      	orrs	r2, r1
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	e007      	b.n	800144c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	685a      	ldr	r2, [r3, #4]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800144a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800145a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	3b01      	subs	r3, #1
 8001468:	051a      	lsls	r2, r3, #20
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	430a      	orrs	r2, r1
 8001470:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	689a      	ldr	r2, [r3, #8]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001480:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6899      	ldr	r1, [r3, #8]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800148e:	025a      	lsls	r2, r3, #9
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	430a      	orrs	r2, r1
 8001496:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	689a      	ldr	r2, [r3, #8]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	6899      	ldr	r1, [r3, #8]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	695b      	ldr	r3, [r3, #20]
 80014b2:	029a      	lsls	r2, r3, #10
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	430a      	orrs	r2, r1
 80014ba:	609a      	str	r2, [r3, #8]
}
 80014bc:	bf00      	nop
 80014be:	3714      	adds	r7, #20
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	40012300 	.word	0x40012300
 80014cc:	0f000001 	.word	0x0f000001

080014d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f003 0307 	and.w	r3, r3, #7
 80014de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e0:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <__NVIC_SetPriorityGrouping+0x44>)
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014e6:	68ba      	ldr	r2, [r7, #8]
 80014e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014ec:	4013      	ands	r3, r2
 80014ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001500:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001502:	4a04      	ldr	r2, [pc, #16]	; (8001514 <__NVIC_SetPriorityGrouping+0x44>)
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	60d3      	str	r3, [r2, #12]
}
 8001508:	bf00      	nop
 800150a:	3714      	adds	r7, #20
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800151c:	4b04      	ldr	r3, [pc, #16]	; (8001530 <__NVIC_GetPriorityGrouping+0x18>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	0a1b      	lsrs	r3, r3, #8
 8001522:	f003 0307 	and.w	r3, r3, #7
}
 8001526:	4618      	mov	r0, r3
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	e000ed00 	.word	0xe000ed00

08001534 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	6039      	str	r1, [r7, #0]
 800153e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001544:	2b00      	cmp	r3, #0
 8001546:	db0a      	blt.n	800155e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	b2da      	uxtb	r2, r3
 800154c:	490c      	ldr	r1, [pc, #48]	; (8001580 <__NVIC_SetPriority+0x4c>)
 800154e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001552:	0112      	lsls	r2, r2, #4
 8001554:	b2d2      	uxtb	r2, r2
 8001556:	440b      	add	r3, r1
 8001558:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800155c:	e00a      	b.n	8001574 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	b2da      	uxtb	r2, r3
 8001562:	4908      	ldr	r1, [pc, #32]	; (8001584 <__NVIC_SetPriority+0x50>)
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	f003 030f 	and.w	r3, r3, #15
 800156a:	3b04      	subs	r3, #4
 800156c:	0112      	lsls	r2, r2, #4
 800156e:	b2d2      	uxtb	r2, r2
 8001570:	440b      	add	r3, r1
 8001572:	761a      	strb	r2, [r3, #24]
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	e000e100 	.word	0xe000e100
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001588:	b480      	push	{r7}
 800158a:	b089      	sub	sp, #36	; 0x24
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	f1c3 0307 	rsb	r3, r3, #7
 80015a2:	2b04      	cmp	r3, #4
 80015a4:	bf28      	it	cs
 80015a6:	2304      	movcs	r3, #4
 80015a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	3304      	adds	r3, #4
 80015ae:	2b06      	cmp	r3, #6
 80015b0:	d902      	bls.n	80015b8 <NVIC_EncodePriority+0x30>
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	3b03      	subs	r3, #3
 80015b6:	e000      	b.n	80015ba <NVIC_EncodePriority+0x32>
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015bc:	f04f 32ff 	mov.w	r2, #4294967295
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	43da      	mvns	r2, r3
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	401a      	ands	r2, r3
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d0:	f04f 31ff 	mov.w	r1, #4294967295
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	fa01 f303 	lsl.w	r3, r1, r3
 80015da:	43d9      	mvns	r1, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e0:	4313      	orrs	r3, r2
         );
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3724      	adds	r7, #36	; 0x24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
	...

080015f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3b01      	subs	r3, #1
 80015fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001600:	d301      	bcc.n	8001606 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001602:	2301      	movs	r3, #1
 8001604:	e00f      	b.n	8001626 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001606:	4a0a      	ldr	r2, [pc, #40]	; (8001630 <SysTick_Config+0x40>)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3b01      	subs	r3, #1
 800160c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800160e:	210f      	movs	r1, #15
 8001610:	f04f 30ff 	mov.w	r0, #4294967295
 8001614:	f7ff ff8e 	bl	8001534 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001618:	4b05      	ldr	r3, [pc, #20]	; (8001630 <SysTick_Config+0x40>)
 800161a:	2200      	movs	r2, #0
 800161c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800161e:	4b04      	ldr	r3, [pc, #16]	; (8001630 <SysTick_Config+0x40>)
 8001620:	2207      	movs	r2, #7
 8001622:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	e000e010 	.word	0xe000e010

08001634 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7ff ff47 	bl	80014d0 <__NVIC_SetPriorityGrouping>
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800164a:	b580      	push	{r7, lr}
 800164c:	b086      	sub	sp, #24
 800164e:	af00      	add	r7, sp, #0
 8001650:	4603      	mov	r3, r0
 8001652:	60b9      	str	r1, [r7, #8]
 8001654:	607a      	str	r2, [r7, #4]
 8001656:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800165c:	f7ff ff5c 	bl	8001518 <__NVIC_GetPriorityGrouping>
 8001660:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	68b9      	ldr	r1, [r7, #8]
 8001666:	6978      	ldr	r0, [r7, #20]
 8001668:	f7ff ff8e 	bl	8001588 <NVIC_EncodePriority>
 800166c:	4602      	mov	r2, r0
 800166e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001672:	4611      	mov	r1, r2
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff ff5d 	bl	8001534 <__NVIC_SetPriority>
}
 800167a:	bf00      	nop
 800167c:	3718      	adds	r7, #24
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b082      	sub	sp, #8
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff ffb0 	bl	80015f0 <SysTick_Config>
 8001690:	4603      	mov	r3, r0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
	...

0800169c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800169c:	b480      	push	{r7}
 800169e:	b089      	sub	sp, #36	; 0x24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016a6:	2300      	movs	r3, #0
 80016a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016aa:	2300      	movs	r3, #0
 80016ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016b2:	2300      	movs	r3, #0
 80016b4:	61fb      	str	r3, [r7, #28]
 80016b6:	e16b      	b.n	8001990 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016b8:	2201      	movs	r2, #1
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	697a      	ldr	r2, [r7, #20]
 80016c8:	4013      	ands	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	f040 815a 	bne.w	800198a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f003 0303 	and.w	r3, r3, #3
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d005      	beq.n	80016ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d130      	bne.n	8001750 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	2203      	movs	r2, #3
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	43db      	mvns	r3, r3
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	4013      	ands	r3, r2
 8001704:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	68da      	ldr	r2, [r3, #12]
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	4313      	orrs	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001724:	2201      	movs	r2, #1
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	43db      	mvns	r3, r3
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	4013      	ands	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	091b      	lsrs	r3, r3, #4
 800173a:	f003 0201 	and.w	r2, r3, #1
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	4313      	orrs	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f003 0303 	and.w	r3, r3, #3
 8001758:	2b03      	cmp	r3, #3
 800175a:	d017      	beq.n	800178c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	2203      	movs	r2, #3
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	4013      	ands	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	689a      	ldr	r2, [r3, #8]
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	4313      	orrs	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f003 0303 	and.w	r3, r3, #3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d123      	bne.n	80017e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	08da      	lsrs	r2, r3, #3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3208      	adds	r2, #8
 80017a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	f003 0307 	and.w	r3, r3, #7
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	220f      	movs	r2, #15
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	43db      	mvns	r3, r3
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	4013      	ands	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	691a      	ldr	r2, [r3, #16]
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	08da      	lsrs	r2, r3, #3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	3208      	adds	r2, #8
 80017da:	69b9      	ldr	r1, [r7, #24]
 80017dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	2203      	movs	r2, #3
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4013      	ands	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f003 0203 	and.w	r2, r3, #3
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	4313      	orrs	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800181c:	2b00      	cmp	r3, #0
 800181e:	f000 80b4 	beq.w	800198a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	4b60      	ldr	r3, [pc, #384]	; (80019a8 <HAL_GPIO_Init+0x30c>)
 8001828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182a:	4a5f      	ldr	r2, [pc, #380]	; (80019a8 <HAL_GPIO_Init+0x30c>)
 800182c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001830:	6453      	str	r3, [r2, #68]	; 0x44
 8001832:	4b5d      	ldr	r3, [pc, #372]	; (80019a8 <HAL_GPIO_Init+0x30c>)
 8001834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001836:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800183e:	4a5b      	ldr	r2, [pc, #364]	; (80019ac <HAL_GPIO_Init+0x310>)
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	089b      	lsrs	r3, r3, #2
 8001844:	3302      	adds	r3, #2
 8001846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800184a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	f003 0303 	and.w	r3, r3, #3
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	220f      	movs	r2, #15
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43db      	mvns	r3, r3
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	4013      	ands	r3, r2
 8001860:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a52      	ldr	r2, [pc, #328]	; (80019b0 <HAL_GPIO_Init+0x314>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d02b      	beq.n	80018c2 <HAL_GPIO_Init+0x226>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a51      	ldr	r2, [pc, #324]	; (80019b4 <HAL_GPIO_Init+0x318>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d025      	beq.n	80018be <HAL_GPIO_Init+0x222>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a50      	ldr	r2, [pc, #320]	; (80019b8 <HAL_GPIO_Init+0x31c>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d01f      	beq.n	80018ba <HAL_GPIO_Init+0x21e>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a4f      	ldr	r2, [pc, #316]	; (80019bc <HAL_GPIO_Init+0x320>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d019      	beq.n	80018b6 <HAL_GPIO_Init+0x21a>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a4e      	ldr	r2, [pc, #312]	; (80019c0 <HAL_GPIO_Init+0x324>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d013      	beq.n	80018b2 <HAL_GPIO_Init+0x216>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a4d      	ldr	r2, [pc, #308]	; (80019c4 <HAL_GPIO_Init+0x328>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d00d      	beq.n	80018ae <HAL_GPIO_Init+0x212>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a4c      	ldr	r2, [pc, #304]	; (80019c8 <HAL_GPIO_Init+0x32c>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d007      	beq.n	80018aa <HAL_GPIO_Init+0x20e>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a4b      	ldr	r2, [pc, #300]	; (80019cc <HAL_GPIO_Init+0x330>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d101      	bne.n	80018a6 <HAL_GPIO_Init+0x20a>
 80018a2:	2307      	movs	r3, #7
 80018a4:	e00e      	b.n	80018c4 <HAL_GPIO_Init+0x228>
 80018a6:	2308      	movs	r3, #8
 80018a8:	e00c      	b.n	80018c4 <HAL_GPIO_Init+0x228>
 80018aa:	2306      	movs	r3, #6
 80018ac:	e00a      	b.n	80018c4 <HAL_GPIO_Init+0x228>
 80018ae:	2305      	movs	r3, #5
 80018b0:	e008      	b.n	80018c4 <HAL_GPIO_Init+0x228>
 80018b2:	2304      	movs	r3, #4
 80018b4:	e006      	b.n	80018c4 <HAL_GPIO_Init+0x228>
 80018b6:	2303      	movs	r3, #3
 80018b8:	e004      	b.n	80018c4 <HAL_GPIO_Init+0x228>
 80018ba:	2302      	movs	r3, #2
 80018bc:	e002      	b.n	80018c4 <HAL_GPIO_Init+0x228>
 80018be:	2301      	movs	r3, #1
 80018c0:	e000      	b.n	80018c4 <HAL_GPIO_Init+0x228>
 80018c2:	2300      	movs	r3, #0
 80018c4:	69fa      	ldr	r2, [r7, #28]
 80018c6:	f002 0203 	and.w	r2, r2, #3
 80018ca:	0092      	lsls	r2, r2, #2
 80018cc:	4093      	lsls	r3, r2
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018d4:	4935      	ldr	r1, [pc, #212]	; (80019ac <HAL_GPIO_Init+0x310>)
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	089b      	lsrs	r3, r3, #2
 80018da:	3302      	adds	r3, #2
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018e2:	4b3b      	ldr	r3, [pc, #236]	; (80019d0 <HAL_GPIO_Init+0x334>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	43db      	mvns	r3, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4013      	ands	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d003      	beq.n	8001906 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	4313      	orrs	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001906:	4a32      	ldr	r2, [pc, #200]	; (80019d0 <HAL_GPIO_Init+0x334>)
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800190c:	4b30      	ldr	r3, [pc, #192]	; (80019d0 <HAL_GPIO_Init+0x334>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	43db      	mvns	r3, r3
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4013      	ands	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d003      	beq.n	8001930 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	4313      	orrs	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001930:	4a27      	ldr	r2, [pc, #156]	; (80019d0 <HAL_GPIO_Init+0x334>)
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001936:	4b26      	ldr	r3, [pc, #152]	; (80019d0 <HAL_GPIO_Init+0x334>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	43db      	mvns	r3, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4013      	ands	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d003      	beq.n	800195a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	4313      	orrs	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800195a:	4a1d      	ldr	r2, [pc, #116]	; (80019d0 <HAL_GPIO_Init+0x334>)
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001960:	4b1b      	ldr	r3, [pc, #108]	; (80019d0 <HAL_GPIO_Init+0x334>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	43db      	mvns	r3, r3
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	4013      	ands	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d003      	beq.n	8001984 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	4313      	orrs	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001984:	4a12      	ldr	r2, [pc, #72]	; (80019d0 <HAL_GPIO_Init+0x334>)
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	3301      	adds	r3, #1
 800198e:	61fb      	str	r3, [r7, #28]
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	2b0f      	cmp	r3, #15
 8001994:	f67f ae90 	bls.w	80016b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001998:	bf00      	nop
 800199a:	bf00      	nop
 800199c:	3724      	adds	r7, #36	; 0x24
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	40023800 	.word	0x40023800
 80019ac:	40013800 	.word	0x40013800
 80019b0:	40020000 	.word	0x40020000
 80019b4:	40020400 	.word	0x40020400
 80019b8:	40020800 	.word	0x40020800
 80019bc:	40020c00 	.word	0x40020c00
 80019c0:	40021000 	.word	0x40021000
 80019c4:	40021400 	.word	0x40021400
 80019c8:	40021800 	.word	0x40021800
 80019cc:	40021c00 	.word	0x40021c00
 80019d0:	40013c00 	.word	0x40013c00

080019d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	460b      	mov	r3, r1
 80019de:	807b      	strh	r3, [r7, #2]
 80019e0:	4613      	mov	r3, r2
 80019e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019e4:	787b      	ldrb	r3, [r7, #1]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d003      	beq.n	80019f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019ea:	887a      	ldrh	r2, [r7, #2]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019f0:	e003      	b.n	80019fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019f2:	887b      	ldrh	r3, [r7, #2]
 80019f4:	041a      	lsls	r2, r3, #16
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	619a      	str	r2, [r3, #24]
}
 80019fa:	bf00      	nop
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
	...

08001a08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d101      	bne.n	8001a1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e267      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d075      	beq.n	8001b12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a26:	4b88      	ldr	r3, [pc, #544]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f003 030c 	and.w	r3, r3, #12
 8001a2e:	2b04      	cmp	r3, #4
 8001a30:	d00c      	beq.n	8001a4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a32:	4b85      	ldr	r3, [pc, #532]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a3a:	2b08      	cmp	r3, #8
 8001a3c:	d112      	bne.n	8001a64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a3e:	4b82      	ldr	r3, [pc, #520]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a4a:	d10b      	bne.n	8001a64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a4c:	4b7e      	ldr	r3, [pc, #504]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d05b      	beq.n	8001b10 <HAL_RCC_OscConfig+0x108>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d157      	bne.n	8001b10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e242      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a6c:	d106      	bne.n	8001a7c <HAL_RCC_OscConfig+0x74>
 8001a6e:	4b76      	ldr	r3, [pc, #472]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a75      	ldr	r2, [pc, #468]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001a74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a78:	6013      	str	r3, [r2, #0]
 8001a7a:	e01d      	b.n	8001ab8 <HAL_RCC_OscConfig+0xb0>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a84:	d10c      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x98>
 8001a86:	4b70      	ldr	r3, [pc, #448]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a6f      	ldr	r2, [pc, #444]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001a8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a90:	6013      	str	r3, [r2, #0]
 8001a92:	4b6d      	ldr	r3, [pc, #436]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a6c      	ldr	r2, [pc, #432]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a9c:	6013      	str	r3, [r2, #0]
 8001a9e:	e00b      	b.n	8001ab8 <HAL_RCC_OscConfig+0xb0>
 8001aa0:	4b69      	ldr	r3, [pc, #420]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a68      	ldr	r2, [pc, #416]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001aa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aaa:	6013      	str	r3, [r2, #0]
 8001aac:	4b66      	ldr	r3, [pc, #408]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a65      	ldr	r2, [pc, #404]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001ab2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ab6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d013      	beq.n	8001ae8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac0:	f7ff f8d6 	bl	8000c70 <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ac8:	f7ff f8d2 	bl	8000c70 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b64      	cmp	r3, #100	; 0x64
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e207      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ada:	4b5b      	ldr	r3, [pc, #364]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d0f0      	beq.n	8001ac8 <HAL_RCC_OscConfig+0xc0>
 8001ae6:	e014      	b.n	8001b12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae8:	f7ff f8c2 	bl	8000c70 <HAL_GetTick>
 8001aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aee:	e008      	b.n	8001b02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001af0:	f7ff f8be 	bl	8000c70 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b64      	cmp	r3, #100	; 0x64
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e1f3      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b02:	4b51      	ldr	r3, [pc, #324]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1f0      	bne.n	8001af0 <HAL_RCC_OscConfig+0xe8>
 8001b0e:	e000      	b.n	8001b12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d063      	beq.n	8001be6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b1e:	4b4a      	ldr	r3, [pc, #296]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f003 030c 	and.w	r3, r3, #12
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d00b      	beq.n	8001b42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b2a:	4b47      	ldr	r3, [pc, #284]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b32:	2b08      	cmp	r3, #8
 8001b34:	d11c      	bne.n	8001b70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b36:	4b44      	ldr	r3, [pc, #272]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d116      	bne.n	8001b70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b42:	4b41      	ldr	r3, [pc, #260]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d005      	beq.n	8001b5a <HAL_RCC_OscConfig+0x152>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d001      	beq.n	8001b5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e1c7      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b5a:	4b3b      	ldr	r3, [pc, #236]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	4937      	ldr	r1, [pc, #220]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b6e:	e03a      	b.n	8001be6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d020      	beq.n	8001bba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b78:	4b34      	ldr	r3, [pc, #208]	; (8001c4c <HAL_RCC_OscConfig+0x244>)
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7e:	f7ff f877 	bl	8000c70 <HAL_GetTick>
 8001b82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b84:	e008      	b.n	8001b98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b86:	f7ff f873 	bl	8000c70 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e1a8      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b98:	4b2b      	ldr	r3, [pc, #172]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d0f0      	beq.n	8001b86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba4:	4b28      	ldr	r3, [pc, #160]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	691b      	ldr	r3, [r3, #16]
 8001bb0:	00db      	lsls	r3, r3, #3
 8001bb2:	4925      	ldr	r1, [pc, #148]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	600b      	str	r3, [r1, #0]
 8001bb8:	e015      	b.n	8001be6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bba:	4b24      	ldr	r3, [pc, #144]	; (8001c4c <HAL_RCC_OscConfig+0x244>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc0:	f7ff f856 	bl	8000c70 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bc8:	f7ff f852 	bl	8000c70 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e187      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bda:	4b1b      	ldr	r3, [pc, #108]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1f0      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0308 	and.w	r3, r3, #8
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d036      	beq.n	8001c60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d016      	beq.n	8001c28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bfa:	4b15      	ldr	r3, [pc, #84]	; (8001c50 <HAL_RCC_OscConfig+0x248>)
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c00:	f7ff f836 	bl	8000c70 <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c08:	f7ff f832 	bl	8000c70 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e167      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c1a:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001c1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d0f0      	beq.n	8001c08 <HAL_RCC_OscConfig+0x200>
 8001c26:	e01b      	b.n	8001c60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c28:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <HAL_RCC_OscConfig+0x248>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c2e:	f7ff f81f 	bl	8000c70 <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c34:	e00e      	b.n	8001c54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c36:	f7ff f81b 	bl	8000c70 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d907      	bls.n	8001c54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e150      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	42470000 	.word	0x42470000
 8001c50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c54:	4b88      	ldr	r3, [pc, #544]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001c56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d1ea      	bne.n	8001c36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0304 	and.w	r3, r3, #4
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	f000 8097 	beq.w	8001d9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c72:	4b81      	ldr	r3, [pc, #516]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d10f      	bne.n	8001c9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60bb      	str	r3, [r7, #8]
 8001c82:	4b7d      	ldr	r3, [pc, #500]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	4a7c      	ldr	r2, [pc, #496]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c8e:	4b7a      	ldr	r3, [pc, #488]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c96:	60bb      	str	r3, [r7, #8]
 8001c98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c9e:	4b77      	ldr	r3, [pc, #476]	; (8001e7c <HAL_RCC_OscConfig+0x474>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d118      	bne.n	8001cdc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001caa:	4b74      	ldr	r3, [pc, #464]	; (8001e7c <HAL_RCC_OscConfig+0x474>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a73      	ldr	r2, [pc, #460]	; (8001e7c <HAL_RCC_OscConfig+0x474>)
 8001cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cb6:	f7fe ffdb 	bl	8000c70 <HAL_GetTick>
 8001cba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cbc:	e008      	b.n	8001cd0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cbe:	f7fe ffd7 	bl	8000c70 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e10c      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd0:	4b6a      	ldr	r3, [pc, #424]	; (8001e7c <HAL_RCC_OscConfig+0x474>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d0f0      	beq.n	8001cbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d106      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x2ea>
 8001ce4:	4b64      	ldr	r3, [pc, #400]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce8:	4a63      	ldr	r2, [pc, #396]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001cea:	f043 0301 	orr.w	r3, r3, #1
 8001cee:	6713      	str	r3, [r2, #112]	; 0x70
 8001cf0:	e01c      	b.n	8001d2c <HAL_RCC_OscConfig+0x324>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	2b05      	cmp	r3, #5
 8001cf8:	d10c      	bne.n	8001d14 <HAL_RCC_OscConfig+0x30c>
 8001cfa:	4b5f      	ldr	r3, [pc, #380]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cfe:	4a5e      	ldr	r2, [pc, #376]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001d00:	f043 0304 	orr.w	r3, r3, #4
 8001d04:	6713      	str	r3, [r2, #112]	; 0x70
 8001d06:	4b5c      	ldr	r3, [pc, #368]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d0a:	4a5b      	ldr	r2, [pc, #364]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	6713      	str	r3, [r2, #112]	; 0x70
 8001d12:	e00b      	b.n	8001d2c <HAL_RCC_OscConfig+0x324>
 8001d14:	4b58      	ldr	r3, [pc, #352]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d18:	4a57      	ldr	r2, [pc, #348]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001d1a:	f023 0301 	bic.w	r3, r3, #1
 8001d1e:	6713      	str	r3, [r2, #112]	; 0x70
 8001d20:	4b55      	ldr	r3, [pc, #340]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d24:	4a54      	ldr	r2, [pc, #336]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001d26:	f023 0304 	bic.w	r3, r3, #4
 8001d2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d015      	beq.n	8001d60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d34:	f7fe ff9c 	bl	8000c70 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d3a:	e00a      	b.n	8001d52 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d3c:	f7fe ff98 	bl	8000c70 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e0cb      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d52:	4b49      	ldr	r3, [pc, #292]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d0ee      	beq.n	8001d3c <HAL_RCC_OscConfig+0x334>
 8001d5e:	e014      	b.n	8001d8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d60:	f7fe ff86 	bl	8000c70 <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d66:	e00a      	b.n	8001d7e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d68:	f7fe ff82 	bl	8000c70 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e0b5      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d7e:	4b3e      	ldr	r3, [pc, #248]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1ee      	bne.n	8001d68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d8a:	7dfb      	ldrb	r3, [r7, #23]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d105      	bne.n	8001d9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d90:	4b39      	ldr	r3, [pc, #228]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d94:	4a38      	ldr	r2, [pc, #224]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001d96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f000 80a1 	beq.w	8001ee8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001da6:	4b34      	ldr	r3, [pc, #208]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f003 030c 	and.w	r3, r3, #12
 8001dae:	2b08      	cmp	r3, #8
 8001db0:	d05c      	beq.n	8001e6c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d141      	bne.n	8001e3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dba:	4b31      	ldr	r3, [pc, #196]	; (8001e80 <HAL_RCC_OscConfig+0x478>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc0:	f7fe ff56 	bl	8000c70 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dc8:	f7fe ff52 	bl	8000c70 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e087      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dda:	4b27      	ldr	r3, [pc, #156]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1f0      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	69da      	ldr	r2, [r3, #28]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a1b      	ldr	r3, [r3, #32]
 8001dee:	431a      	orrs	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df4:	019b      	lsls	r3, r3, #6
 8001df6:	431a      	orrs	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dfc:	085b      	lsrs	r3, r3, #1
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	041b      	lsls	r3, r3, #16
 8001e02:	431a      	orrs	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e08:	061b      	lsls	r3, r3, #24
 8001e0a:	491b      	ldr	r1, [pc, #108]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e10:	4b1b      	ldr	r3, [pc, #108]	; (8001e80 <HAL_RCC_OscConfig+0x478>)
 8001e12:	2201      	movs	r2, #1
 8001e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e16:	f7fe ff2b 	bl	8000c70 <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e1c:	e008      	b.n	8001e30 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e1e:	f7fe ff27 	bl	8000c70 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e05c      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e30:	4b11      	ldr	r3, [pc, #68]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d0f0      	beq.n	8001e1e <HAL_RCC_OscConfig+0x416>
 8001e3c:	e054      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e3e:	4b10      	ldr	r3, [pc, #64]	; (8001e80 <HAL_RCC_OscConfig+0x478>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e44:	f7fe ff14 	bl	8000c70 <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e4c:	f7fe ff10 	bl	8000c70 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e045      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e5e:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1f0      	bne.n	8001e4c <HAL_RCC_OscConfig+0x444>
 8001e6a:	e03d      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d107      	bne.n	8001e84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e038      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	40007000 	.word	0x40007000
 8001e80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e84:	4b1b      	ldr	r3, [pc, #108]	; (8001ef4 <HAL_RCC_OscConfig+0x4ec>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d028      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d121      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d11a      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001eba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d111      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eca:	085b      	lsrs	r3, r3, #1
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d107      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ede:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d001      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e000      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3718      	adds	r7, #24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40023800 	.word	0x40023800

08001ef8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d101      	bne.n	8001f0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e0cc      	b.n	80020a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f0c:	4b68      	ldr	r3, [pc, #416]	; (80020b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d90c      	bls.n	8001f34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f1a:	4b65      	ldr	r3, [pc, #404]	; (80020b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	b2d2      	uxtb	r2, r2
 8001f20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f22:	4b63      	ldr	r3, [pc, #396]	; (80020b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d001      	beq.n	8001f34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e0b8      	b.n	80020a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d020      	beq.n	8001f82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0304 	and.w	r3, r3, #4
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d005      	beq.n	8001f58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f4c:	4b59      	ldr	r3, [pc, #356]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	4a58      	ldr	r2, [pc, #352]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0308 	and.w	r3, r3, #8
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d005      	beq.n	8001f70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f64:	4b53      	ldr	r3, [pc, #332]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	4a52      	ldr	r2, [pc, #328]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f70:	4b50      	ldr	r3, [pc, #320]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	494d      	ldr	r1, [pc, #308]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d044      	beq.n	8002018 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d107      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f96:	4b47      	ldr	r3, [pc, #284]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d119      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e07f      	b.n	80020a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d003      	beq.n	8001fb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fb2:	2b03      	cmp	r3, #3
 8001fb4:	d107      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fb6:	4b3f      	ldr	r3, [pc, #252]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d109      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e06f      	b.n	80020a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc6:	4b3b      	ldr	r3, [pc, #236]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e067      	b.n	80020a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fd6:	4b37      	ldr	r3, [pc, #220]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f023 0203 	bic.w	r2, r3, #3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	4934      	ldr	r1, [pc, #208]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fe8:	f7fe fe42 	bl	8000c70 <HAL_GetTick>
 8001fec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fee:	e00a      	b.n	8002006 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ff0:	f7fe fe3e 	bl	8000c70 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e04f      	b.n	80020a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002006:	4b2b      	ldr	r3, [pc, #172]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 020c 	and.w	r2, r3, #12
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	429a      	cmp	r2, r3
 8002016:	d1eb      	bne.n	8001ff0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002018:	4b25      	ldr	r3, [pc, #148]	; (80020b0 <HAL_RCC_ClockConfig+0x1b8>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0307 	and.w	r3, r3, #7
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	429a      	cmp	r2, r3
 8002024:	d20c      	bcs.n	8002040 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002026:	4b22      	ldr	r3, [pc, #136]	; (80020b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	b2d2      	uxtb	r2, r2
 800202c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800202e:	4b20      	ldr	r3, [pc, #128]	; (80020b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	429a      	cmp	r2, r3
 800203a:	d001      	beq.n	8002040 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e032      	b.n	80020a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0304 	and.w	r3, r3, #4
 8002048:	2b00      	cmp	r3, #0
 800204a:	d008      	beq.n	800205e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800204c:	4b19      	ldr	r3, [pc, #100]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	4916      	ldr	r1, [pc, #88]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 800205a:	4313      	orrs	r3, r2
 800205c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0308 	and.w	r3, r3, #8
 8002066:	2b00      	cmp	r3, #0
 8002068:	d009      	beq.n	800207e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800206a:	4b12      	ldr	r3, [pc, #72]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	490e      	ldr	r1, [pc, #56]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 800207a:	4313      	orrs	r3, r2
 800207c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800207e:	f000 f821 	bl	80020c4 <HAL_RCC_GetSysClockFreq>
 8002082:	4602      	mov	r2, r0
 8002084:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	091b      	lsrs	r3, r3, #4
 800208a:	f003 030f 	and.w	r3, r3, #15
 800208e:	490a      	ldr	r1, [pc, #40]	; (80020b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002090:	5ccb      	ldrb	r3, [r1, r3]
 8002092:	fa22 f303 	lsr.w	r3, r2, r3
 8002096:	4a09      	ldr	r2, [pc, #36]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8002098:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800209a:	4b09      	ldr	r3, [pc, #36]	; (80020c0 <HAL_RCC_ClockConfig+0x1c8>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4618      	mov	r0, r3
 80020a0:	f7fe fda2 	bl	8000be8 <HAL_InitTick>

  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40023c00 	.word	0x40023c00
 80020b4:	40023800 	.word	0x40023800
 80020b8:	08003228 	.word	0x08003228
 80020bc:	20000000 	.word	0x20000000
 80020c0:	20000004 	.word	0x20000004

080020c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020c8:	b094      	sub	sp, #80	; 0x50
 80020ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80020cc:	2300      	movs	r3, #0
 80020ce:	647b      	str	r3, [r7, #68]	; 0x44
 80020d0:	2300      	movs	r3, #0
 80020d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020d4:	2300      	movs	r3, #0
 80020d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80020d8:	2300      	movs	r3, #0
 80020da:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020dc:	4b79      	ldr	r3, [pc, #484]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f003 030c 	and.w	r3, r3, #12
 80020e4:	2b08      	cmp	r3, #8
 80020e6:	d00d      	beq.n	8002104 <HAL_RCC_GetSysClockFreq+0x40>
 80020e8:	2b08      	cmp	r3, #8
 80020ea:	f200 80e1 	bhi.w	80022b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d002      	beq.n	80020f8 <HAL_RCC_GetSysClockFreq+0x34>
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	d003      	beq.n	80020fe <HAL_RCC_GetSysClockFreq+0x3a>
 80020f6:	e0db      	b.n	80022b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020f8:	4b73      	ldr	r3, [pc, #460]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80020fa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80020fc:	e0db      	b.n	80022b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020fe:	4b73      	ldr	r3, [pc, #460]	; (80022cc <HAL_RCC_GetSysClockFreq+0x208>)
 8002100:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002102:	e0d8      	b.n	80022b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002104:	4b6f      	ldr	r3, [pc, #444]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800210c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800210e:	4b6d      	ldr	r3, [pc, #436]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d063      	beq.n	80021e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800211a:	4b6a      	ldr	r3, [pc, #424]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	099b      	lsrs	r3, r3, #6
 8002120:	2200      	movs	r2, #0
 8002122:	63bb      	str	r3, [r7, #56]	; 0x38
 8002124:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002128:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800212c:	633b      	str	r3, [r7, #48]	; 0x30
 800212e:	2300      	movs	r3, #0
 8002130:	637b      	str	r3, [r7, #52]	; 0x34
 8002132:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002136:	4622      	mov	r2, r4
 8002138:	462b      	mov	r3, r5
 800213a:	f04f 0000 	mov.w	r0, #0
 800213e:	f04f 0100 	mov.w	r1, #0
 8002142:	0159      	lsls	r1, r3, #5
 8002144:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002148:	0150      	lsls	r0, r2, #5
 800214a:	4602      	mov	r2, r0
 800214c:	460b      	mov	r3, r1
 800214e:	4621      	mov	r1, r4
 8002150:	1a51      	subs	r1, r2, r1
 8002152:	6139      	str	r1, [r7, #16]
 8002154:	4629      	mov	r1, r5
 8002156:	eb63 0301 	sbc.w	r3, r3, r1
 800215a:	617b      	str	r3, [r7, #20]
 800215c:	f04f 0200 	mov.w	r2, #0
 8002160:	f04f 0300 	mov.w	r3, #0
 8002164:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002168:	4659      	mov	r1, fp
 800216a:	018b      	lsls	r3, r1, #6
 800216c:	4651      	mov	r1, sl
 800216e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002172:	4651      	mov	r1, sl
 8002174:	018a      	lsls	r2, r1, #6
 8002176:	4651      	mov	r1, sl
 8002178:	ebb2 0801 	subs.w	r8, r2, r1
 800217c:	4659      	mov	r1, fp
 800217e:	eb63 0901 	sbc.w	r9, r3, r1
 8002182:	f04f 0200 	mov.w	r2, #0
 8002186:	f04f 0300 	mov.w	r3, #0
 800218a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800218e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002192:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002196:	4690      	mov	r8, r2
 8002198:	4699      	mov	r9, r3
 800219a:	4623      	mov	r3, r4
 800219c:	eb18 0303 	adds.w	r3, r8, r3
 80021a0:	60bb      	str	r3, [r7, #8]
 80021a2:	462b      	mov	r3, r5
 80021a4:	eb49 0303 	adc.w	r3, r9, r3
 80021a8:	60fb      	str	r3, [r7, #12]
 80021aa:	f04f 0200 	mov.w	r2, #0
 80021ae:	f04f 0300 	mov.w	r3, #0
 80021b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80021b6:	4629      	mov	r1, r5
 80021b8:	024b      	lsls	r3, r1, #9
 80021ba:	4621      	mov	r1, r4
 80021bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80021c0:	4621      	mov	r1, r4
 80021c2:	024a      	lsls	r2, r1, #9
 80021c4:	4610      	mov	r0, r2
 80021c6:	4619      	mov	r1, r3
 80021c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021ca:	2200      	movs	r2, #0
 80021cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80021ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80021d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80021d4:	f7fe f854 	bl	8000280 <__aeabi_uldivmod>
 80021d8:	4602      	mov	r2, r0
 80021da:	460b      	mov	r3, r1
 80021dc:	4613      	mov	r3, r2
 80021de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021e0:	e058      	b.n	8002294 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021e2:	4b38      	ldr	r3, [pc, #224]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	099b      	lsrs	r3, r3, #6
 80021e8:	2200      	movs	r2, #0
 80021ea:	4618      	mov	r0, r3
 80021ec:	4611      	mov	r1, r2
 80021ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80021f2:	623b      	str	r3, [r7, #32]
 80021f4:	2300      	movs	r3, #0
 80021f6:	627b      	str	r3, [r7, #36]	; 0x24
 80021f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80021fc:	4642      	mov	r2, r8
 80021fe:	464b      	mov	r3, r9
 8002200:	f04f 0000 	mov.w	r0, #0
 8002204:	f04f 0100 	mov.w	r1, #0
 8002208:	0159      	lsls	r1, r3, #5
 800220a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800220e:	0150      	lsls	r0, r2, #5
 8002210:	4602      	mov	r2, r0
 8002212:	460b      	mov	r3, r1
 8002214:	4641      	mov	r1, r8
 8002216:	ebb2 0a01 	subs.w	sl, r2, r1
 800221a:	4649      	mov	r1, r9
 800221c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002220:	f04f 0200 	mov.w	r2, #0
 8002224:	f04f 0300 	mov.w	r3, #0
 8002228:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800222c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002230:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002234:	ebb2 040a 	subs.w	r4, r2, sl
 8002238:	eb63 050b 	sbc.w	r5, r3, fp
 800223c:	f04f 0200 	mov.w	r2, #0
 8002240:	f04f 0300 	mov.w	r3, #0
 8002244:	00eb      	lsls	r3, r5, #3
 8002246:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800224a:	00e2      	lsls	r2, r4, #3
 800224c:	4614      	mov	r4, r2
 800224e:	461d      	mov	r5, r3
 8002250:	4643      	mov	r3, r8
 8002252:	18e3      	adds	r3, r4, r3
 8002254:	603b      	str	r3, [r7, #0]
 8002256:	464b      	mov	r3, r9
 8002258:	eb45 0303 	adc.w	r3, r5, r3
 800225c:	607b      	str	r3, [r7, #4]
 800225e:	f04f 0200 	mov.w	r2, #0
 8002262:	f04f 0300 	mov.w	r3, #0
 8002266:	e9d7 4500 	ldrd	r4, r5, [r7]
 800226a:	4629      	mov	r1, r5
 800226c:	028b      	lsls	r3, r1, #10
 800226e:	4621      	mov	r1, r4
 8002270:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002274:	4621      	mov	r1, r4
 8002276:	028a      	lsls	r2, r1, #10
 8002278:	4610      	mov	r0, r2
 800227a:	4619      	mov	r1, r3
 800227c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800227e:	2200      	movs	r2, #0
 8002280:	61bb      	str	r3, [r7, #24]
 8002282:	61fa      	str	r2, [r7, #28]
 8002284:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002288:	f7fd fffa 	bl	8000280 <__aeabi_uldivmod>
 800228c:	4602      	mov	r2, r0
 800228e:	460b      	mov	r3, r1
 8002290:	4613      	mov	r3, r2
 8002292:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002294:	4b0b      	ldr	r3, [pc, #44]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	0c1b      	lsrs	r3, r3, #16
 800229a:	f003 0303 	and.w	r3, r3, #3
 800229e:	3301      	adds	r3, #1
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80022a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80022a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80022ae:	e002      	b.n	80022b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022b0:	4b05      	ldr	r3, [pc, #20]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80022b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80022b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3750      	adds	r7, #80	; 0x50
 80022bc:	46bd      	mov	sp, r7
 80022be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022c2:	bf00      	nop
 80022c4:	40023800 	.word	0x40023800
 80022c8:	00f42400 	.word	0x00f42400
 80022cc:	007a1200 	.word	0x007a1200

080022d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022d4:	4b03      	ldr	r3, [pc, #12]	; (80022e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80022d6:	681b      	ldr	r3, [r3, #0]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	20000000 	.word	0x20000000

080022e8 <DWT_Delay_Init>:

/* private functions prototypes */
/**
 * @brief DWT Cortex Tick counter for Microsecond delay
 */
static uint32_t DWT_Delay_Init(void) {
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80022ec:	4b14      	ldr	r3, [pc, #80]	; (8002340 <DWT_Delay_Init+0x58>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	4a13      	ldr	r2, [pc, #76]	; (8002340 <DWT_Delay_Init+0x58>)
 80022f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022f6:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80022f8:	4b11      	ldr	r3, [pc, #68]	; (8002340 <DWT_Delay_Init+0x58>)
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	4a10      	ldr	r2, [pc, #64]	; (8002340 <DWT_Delay_Init+0x58>)
 80022fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002302:	60d3      	str	r3, [r2, #12]
  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk;
 8002304:	4b0f      	ldr	r3, [pc, #60]	; (8002344 <DWT_Delay_Init+0x5c>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a0e      	ldr	r2, [pc, #56]	; (8002344 <DWT_Delay_Init+0x5c>)
 800230a:	f023 0301 	bic.w	r3, r3, #1
 800230e:	6013      	str	r3, [r2, #0]
  /* Enable clock cycle counter */
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002310:	4b0c      	ldr	r3, [pc, #48]	; (8002344 <DWT_Delay_Init+0x5c>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a0b      	ldr	r2, [pc, #44]	; (8002344 <DWT_Delay_Init+0x5c>)
 8002316:	f043 0301 	orr.w	r3, r3, #1
 800231a:	6013      	str	r3, [r2, #0]
  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 800231c:	4b09      	ldr	r3, [pc, #36]	; (8002344 <DWT_Delay_Init+0x5c>)
 800231e:	2200      	movs	r2, #0
 8002320:	605a      	str	r2, [r3, #4]
  /* 3 NO OPERATION instructions */
  __NOP();
 8002322:	bf00      	nop
  __NOP();
 8002324:	bf00      	nop
  __NOP();
 8002326:	bf00      	nop
  /* Check if clock cycle counter has started */
  if(DWT->CYCCNT)
 8002328:	4b06      	ldr	r3, [pc, #24]	; (8002344 <DWT_Delay_Init+0x5c>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <DWT_Delay_Init+0x4c>
  {
    return 0;
 8002330:	2300      	movs	r3, #0
 8002332:	e000      	b.n	8002336 <DWT_Delay_Init+0x4e>
  }
  else
  {
    return 1;
 8002334:	2301      	movs	r3, #1
  }
}
 8002336:	4618      	mov	r0, r3
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	e000edf0 	.word	0xe000edf0
 8002344:	e0001000 	.word	0xe0001000

08002348 <DWT_Delay_us>:

__STATIC_INLINE void DWT_Delay_us(volatile uint32_t usec)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 uint32_t clk_cycle_start = DWT->CYCCNT;
 8002350:	4b0d      	ldr	r3, [pc, #52]	; (8002388 <DWT_Delay_us+0x40>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	60fb      	str	r3, [r7, #12]
 usec *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8002356:	f7ff ffbb 	bl	80022d0 <HAL_RCC_GetHCLKFreq>
 800235a:	4603      	mov	r3, r0
 800235c:	4a0b      	ldr	r2, [pc, #44]	; (800238c <DWT_Delay_us+0x44>)
 800235e:	fba2 2303 	umull	r2, r3, r2, r3
 8002362:	0c9b      	lsrs	r3, r3, #18
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	fb02 f303 	mul.w	r3, r2, r3
 800236a:	607b      	str	r3, [r7, #4]
 while ((DWT->CYCCNT - clk_cycle_start) < usec);
 800236c:	bf00      	nop
 800236e:	4b06      	ldr	r3, [pc, #24]	; (8002388 <DWT_Delay_us+0x40>)
 8002370:	685a      	ldr	r2, [r3, #4]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	1ad2      	subs	r2, r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	429a      	cmp	r2, r3
 800237a:	d3f8      	bcc.n	800236e <DWT_Delay_us+0x26>
}
 800237c:	bf00      	nop
 800237e:	bf00      	nop
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	e0001000 	.word	0xe0001000
 800238c:	431bde83 	.word	0x431bde83

08002390 <lcd16x2_enablePulse>:

/**
 * @brief Enable Pulse function
 */
static void lcd16x2_enablePulse(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_SET);
 8002394:	4b0b      	ldr	r3, [pc, #44]	; (80023c4 <lcd16x2_enablePulse+0x34>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a0b      	ldr	r2, [pc, #44]	; (80023c8 <lcd16x2_enablePulse+0x38>)
 800239a:	8811      	ldrh	r1, [r2, #0]
 800239c:	2201      	movs	r2, #1
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff fb18 	bl	80019d4 <HAL_GPIO_WritePin>
  DWT_Delay_us(T_CONST);
 80023a4:	2014      	movs	r0, #20
 80023a6:	f7ff ffcf 	bl	8002348 <DWT_Delay_us>
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_RESET);
 80023aa:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <lcd16x2_enablePulse+0x34>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a06      	ldr	r2, [pc, #24]	; (80023c8 <lcd16x2_enablePulse+0x38>)
 80023b0:	8811      	ldrh	r1, [r2, #0]
 80023b2:	2200      	movs	r2, #0
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff fb0d 	bl	80019d4 <HAL_GPIO_WritePin>
  DWT_Delay_us(60);
 80023ba:	203c      	movs	r0, #60	; 0x3c
 80023bc:	f7ff ffc4 	bl	8002348 <DWT_Delay_us>
}
 80023c0:	bf00      	nop
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	200000e4 	.word	0x200000e4
 80023c8:	200000ea 	.word	0x200000ea

080023cc <lcd16x2_rs>:

/**
 * @brief RS control
 */
static void lcd16x2_rs(bool state)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	4603      	mov	r3, r0
 80023d4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, (GPIO_PinState)state);
 80023d6:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <lcd16x2_rs+0x24>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a06      	ldr	r2, [pc, #24]	; (80023f4 <lcd16x2_rs+0x28>)
 80023dc:	8811      	ldrh	r1, [r2, #0]
 80023de:	79fa      	ldrb	r2, [r7, #7]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff faf7 	bl	80019d4 <HAL_GPIO_WritePin>
}
 80023e6:	bf00      	nop
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	200000e4 	.word	0x200000e4
 80023f4:	200000e8 	.word	0x200000e8

080023f8 <lcd16x2_write>:

/**
 * @brief Write parallel signal to lcd
 */
static void lcd16x2_write(uint8_t wbyte)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	4603      	mov	r3, r0
 8002400:	71fb      	strb	r3, [r7, #7]
  uint8_t LSB_nibble = wbyte&0xF, MSB_nibble = (wbyte>>4)&0xF;
 8002402:	79fb      	ldrb	r3, [r7, #7]
 8002404:	f003 030f 	and.w	r3, r3, #15
 8002408:	73fb      	strb	r3, [r7, #15]
 800240a:	79fb      	ldrb	r3, [r7, #7]
 800240c:	091b      	lsrs	r3, r3, #4
 800240e:	73bb      	strb	r3, [r7, #14]
  if(is8BitsMode)
 8002410:	4b5f      	ldr	r3, [pc, #380]	; (8002590 <lcd16x2_write+0x198>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d05a      	beq.n	80024ce <lcd16x2_write+0xd6>
  {
    //LSB data
    HAL_GPIO_WritePin(PORT_LSB, D0_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8002418:	4b5e      	ldr	r3, [pc, #376]	; (8002594 <lcd16x2_write+0x19c>)
 800241a:	6818      	ldr	r0, [r3, #0]
 800241c:	4b5e      	ldr	r3, [pc, #376]	; (8002598 <lcd16x2_write+0x1a0>)
 800241e:	8819      	ldrh	r1, [r3, #0]
 8002420:	7bfb      	ldrb	r3, [r7, #15]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	b2db      	uxtb	r3, r3
 8002428:	461a      	mov	r2, r3
 800242a:	f7ff fad3 	bl	80019d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D1_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 800242e:	4b59      	ldr	r3, [pc, #356]	; (8002594 <lcd16x2_write+0x19c>)
 8002430:	6818      	ldr	r0, [r3, #0]
 8002432:	4b5a      	ldr	r3, [pc, #360]	; (800259c <lcd16x2_write+0x1a4>)
 8002434:	8819      	ldrh	r1, [r3, #0]
 8002436:	7bfb      	ldrb	r3, [r7, #15]
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	b2db      	uxtb	r3, r3
 800243e:	461a      	mov	r2, r3
 8002440:	f7ff fac8 	bl	80019d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D2_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8002444:	4b53      	ldr	r3, [pc, #332]	; (8002594 <lcd16x2_write+0x19c>)
 8002446:	6818      	ldr	r0, [r3, #0]
 8002448:	4b55      	ldr	r3, [pc, #340]	; (80025a0 <lcd16x2_write+0x1a8>)
 800244a:	8819      	ldrh	r1, [r3, #0]
 800244c:	7bfb      	ldrb	r3, [r7, #15]
 800244e:	f003 0304 	and.w	r3, r3, #4
 8002452:	b2db      	uxtb	r3, r3
 8002454:	461a      	mov	r2, r3
 8002456:	f7ff fabd 	bl	80019d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D3_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 800245a:	4b4e      	ldr	r3, [pc, #312]	; (8002594 <lcd16x2_write+0x19c>)
 800245c:	6818      	ldr	r0, [r3, #0]
 800245e:	4b51      	ldr	r3, [pc, #324]	; (80025a4 <lcd16x2_write+0x1ac>)
 8002460:	8819      	ldrh	r1, [r3, #0]
 8002462:	7bfb      	ldrb	r3, [r7, #15]
 8002464:	f003 0308 	and.w	r3, r3, #8
 8002468:	b2db      	uxtb	r3, r3
 800246a:	461a      	mov	r2, r3
 800246c:	f7ff fab2 	bl	80019d4 <HAL_GPIO_WritePin>
    //MSB data
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8002470:	4b4d      	ldr	r3, [pc, #308]	; (80025a8 <lcd16x2_write+0x1b0>)
 8002472:	6818      	ldr	r0, [r3, #0]
 8002474:	4b4d      	ldr	r3, [pc, #308]	; (80025ac <lcd16x2_write+0x1b4>)
 8002476:	8819      	ldrh	r1, [r3, #0]
 8002478:	7bbb      	ldrb	r3, [r7, #14]
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	b2db      	uxtb	r3, r3
 8002480:	461a      	mov	r2, r3
 8002482:	f7ff faa7 	bl	80019d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8002486:	4b48      	ldr	r3, [pc, #288]	; (80025a8 <lcd16x2_write+0x1b0>)
 8002488:	6818      	ldr	r0, [r3, #0]
 800248a:	4b49      	ldr	r3, [pc, #292]	; (80025b0 <lcd16x2_write+0x1b8>)
 800248c:	8819      	ldrh	r1, [r3, #0]
 800248e:	7bbb      	ldrb	r3, [r7, #14]
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	b2db      	uxtb	r3, r3
 8002496:	461a      	mov	r2, r3
 8002498:	f7ff fa9c 	bl	80019d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 800249c:	4b42      	ldr	r3, [pc, #264]	; (80025a8 <lcd16x2_write+0x1b0>)
 800249e:	6818      	ldr	r0, [r3, #0]
 80024a0:	4b44      	ldr	r3, [pc, #272]	; (80025b4 <lcd16x2_write+0x1bc>)
 80024a2:	8819      	ldrh	r1, [r3, #0]
 80024a4:	7bbb      	ldrb	r3, [r7, #14]
 80024a6:	f003 0304 	and.w	r3, r3, #4
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	461a      	mov	r2, r3
 80024ae:	f7ff fa91 	bl	80019d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 80024b2:	4b3d      	ldr	r3, [pc, #244]	; (80025a8 <lcd16x2_write+0x1b0>)
 80024b4:	6818      	ldr	r0, [r3, #0]
 80024b6:	4b40      	ldr	r3, [pc, #256]	; (80025b8 <lcd16x2_write+0x1c0>)
 80024b8:	8819      	ldrh	r1, [r3, #0]
 80024ba:	7bbb      	ldrb	r3, [r7, #14]
 80024bc:	f003 0308 	and.w	r3, r3, #8
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	461a      	mov	r2, r3
 80024c4:	f7ff fa86 	bl	80019d4 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 80024c8:	f7ff ff62 	bl	8002390 <lcd16x2_enablePulse>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
    lcd16x2_enablePulse();
  }
}
 80024cc:	e05b      	b.n	8002586 <lcd16x2_write+0x18e>
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 80024ce:	4b36      	ldr	r3, [pc, #216]	; (80025a8 <lcd16x2_write+0x1b0>)
 80024d0:	6818      	ldr	r0, [r3, #0]
 80024d2:	4b36      	ldr	r3, [pc, #216]	; (80025ac <lcd16x2_write+0x1b4>)
 80024d4:	8819      	ldrh	r1, [r3, #0]
 80024d6:	7bbb      	ldrb	r3, [r7, #14]
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	461a      	mov	r2, r3
 80024e0:	f7ff fa78 	bl	80019d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 80024e4:	4b30      	ldr	r3, [pc, #192]	; (80025a8 <lcd16x2_write+0x1b0>)
 80024e6:	6818      	ldr	r0, [r3, #0]
 80024e8:	4b31      	ldr	r3, [pc, #196]	; (80025b0 <lcd16x2_write+0x1b8>)
 80024ea:	8819      	ldrh	r1, [r3, #0]
 80024ec:	7bbb      	ldrb	r3, [r7, #14]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	461a      	mov	r2, r3
 80024f6:	f7ff fa6d 	bl	80019d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 80024fa:	4b2b      	ldr	r3, [pc, #172]	; (80025a8 <lcd16x2_write+0x1b0>)
 80024fc:	6818      	ldr	r0, [r3, #0]
 80024fe:	4b2d      	ldr	r3, [pc, #180]	; (80025b4 <lcd16x2_write+0x1bc>)
 8002500:	8819      	ldrh	r1, [r3, #0]
 8002502:	7bbb      	ldrb	r3, [r7, #14]
 8002504:	f003 0304 	and.w	r3, r3, #4
 8002508:	b2db      	uxtb	r3, r3
 800250a:	461a      	mov	r2, r3
 800250c:	f7ff fa62 	bl	80019d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8002510:	4b25      	ldr	r3, [pc, #148]	; (80025a8 <lcd16x2_write+0x1b0>)
 8002512:	6818      	ldr	r0, [r3, #0]
 8002514:	4b28      	ldr	r3, [pc, #160]	; (80025b8 <lcd16x2_write+0x1c0>)
 8002516:	8819      	ldrh	r1, [r3, #0]
 8002518:	7bbb      	ldrb	r3, [r7, #14]
 800251a:	f003 0308 	and.w	r3, r3, #8
 800251e:	b2db      	uxtb	r3, r3
 8002520:	461a      	mov	r2, r3
 8002522:	f7ff fa57 	bl	80019d4 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 8002526:	f7ff ff33 	bl	8002390 <lcd16x2_enablePulse>
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 800252a:	4b1f      	ldr	r3, [pc, #124]	; (80025a8 <lcd16x2_write+0x1b0>)
 800252c:	6818      	ldr	r0, [r3, #0]
 800252e:	4b1f      	ldr	r3, [pc, #124]	; (80025ac <lcd16x2_write+0x1b4>)
 8002530:	8819      	ldrh	r1, [r3, #0]
 8002532:	7bfb      	ldrb	r3, [r7, #15]
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	b2db      	uxtb	r3, r3
 800253a:	461a      	mov	r2, r3
 800253c:	f7ff fa4a 	bl	80019d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8002540:	4b19      	ldr	r3, [pc, #100]	; (80025a8 <lcd16x2_write+0x1b0>)
 8002542:	6818      	ldr	r0, [r3, #0]
 8002544:	4b1a      	ldr	r3, [pc, #104]	; (80025b0 <lcd16x2_write+0x1b8>)
 8002546:	8819      	ldrh	r1, [r3, #0]
 8002548:	7bfb      	ldrb	r3, [r7, #15]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	b2db      	uxtb	r3, r3
 8002550:	461a      	mov	r2, r3
 8002552:	f7ff fa3f 	bl	80019d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8002556:	4b14      	ldr	r3, [pc, #80]	; (80025a8 <lcd16x2_write+0x1b0>)
 8002558:	6818      	ldr	r0, [r3, #0]
 800255a:	4b16      	ldr	r3, [pc, #88]	; (80025b4 <lcd16x2_write+0x1bc>)
 800255c:	8819      	ldrh	r1, [r3, #0]
 800255e:	7bfb      	ldrb	r3, [r7, #15]
 8002560:	f003 0304 	and.w	r3, r3, #4
 8002564:	b2db      	uxtb	r3, r3
 8002566:	461a      	mov	r2, r3
 8002568:	f7ff fa34 	bl	80019d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 800256c:	4b0e      	ldr	r3, [pc, #56]	; (80025a8 <lcd16x2_write+0x1b0>)
 800256e:	6818      	ldr	r0, [r3, #0]
 8002570:	4b11      	ldr	r3, [pc, #68]	; (80025b8 <lcd16x2_write+0x1c0>)
 8002572:	8819      	ldrh	r1, [r3, #0]
 8002574:	7bfb      	ldrb	r3, [r7, #15]
 8002576:	f003 0308 	and.w	r3, r3, #8
 800257a:	b2db      	uxtb	r3, r3
 800257c:	461a      	mov	r2, r3
 800257e:	f7ff fa29 	bl	80019d4 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 8002582:	f7ff ff05 	bl	8002390 <lcd16x2_enablePulse>
}
 8002586:	bf00      	nop
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	20000009 	.word	0x20000009
 8002594:	200000ec 	.word	0x200000ec
 8002598:	200000f0 	.word	0x200000f0
 800259c:	200000f2 	.word	0x200000f2
 80025a0:	200000f4 	.word	0x200000f4
 80025a4:	200000f6 	.word	0x200000f6
 80025a8:	200000f8 	.word	0x200000f8
 80025ac:	200000fc 	.word	0x200000fc
 80025b0:	200000fe 	.word	0x200000fe
 80025b4:	20000100 	.word	0x20000100
 80025b8:	20000102 	.word	0x20000102

080025bc <lcd16x2_writeCommand>:

/**
 * @brief Write command
 */
static void lcd16x2_writeCommand(uint8_t cmd)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	4603      	mov	r3, r0
 80025c4:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(false);
 80025c6:	2000      	movs	r0, #0
 80025c8:	f7ff ff00 	bl	80023cc <lcd16x2_rs>
  lcd16x2_write(cmd);
 80025cc:	79fb      	ldrb	r3, [r7, #7]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff ff12 	bl	80023f8 <lcd16x2_write>
}
 80025d4:	bf00      	nop
 80025d6:	3708      	adds	r7, #8
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <lcd16x2_writeData>:

/**
 * @brief Write data
 */
static void lcd16x2_writeData(uint8_t data)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(true);
 80025e6:	2001      	movs	r0, #1
 80025e8:	f7ff fef0 	bl	80023cc <lcd16x2_rs>
  lcd16x2_write(data);
 80025ec:	79fb      	ldrb	r3, [r7, #7]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7ff ff02 	bl	80023f8 <lcd16x2_write>
}
 80025f4:	bf00      	nop
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <lcd16x2_write4>:

/**
 * @brief 4-bits write
 */
static void lcd16x2_write4(uint8_t nib)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	4603      	mov	r3, r0
 8002604:	71fb      	strb	r3, [r7, #7]
  nib &= 0xF;
 8002606:	79fb      	ldrb	r3, [r7, #7]
 8002608:	f003 030f 	and.w	r3, r3, #15
 800260c:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(false);
 800260e:	2000      	movs	r0, #0
 8002610:	f7ff fedc 	bl	80023cc <lcd16x2_rs>
  //LSB data
  HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(nib&0x1));
 8002614:	4b18      	ldr	r3, [pc, #96]	; (8002678 <lcd16x2_write4+0x7c>)
 8002616:	6818      	ldr	r0, [r3, #0]
 8002618:	4b18      	ldr	r3, [pc, #96]	; (800267c <lcd16x2_write4+0x80>)
 800261a:	8819      	ldrh	r1, [r3, #0]
 800261c:	79fb      	ldrb	r3, [r7, #7]
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	b2db      	uxtb	r3, r3
 8002624:	461a      	mov	r2, r3
 8002626:	f7ff f9d5 	bl	80019d4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(nib&0x2));
 800262a:	4b13      	ldr	r3, [pc, #76]	; (8002678 <lcd16x2_write4+0x7c>)
 800262c:	6818      	ldr	r0, [r3, #0]
 800262e:	4b14      	ldr	r3, [pc, #80]	; (8002680 <lcd16x2_write4+0x84>)
 8002630:	8819      	ldrh	r1, [r3, #0]
 8002632:	79fb      	ldrb	r3, [r7, #7]
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	b2db      	uxtb	r3, r3
 800263a:	461a      	mov	r2, r3
 800263c:	f7ff f9ca 	bl	80019d4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(nib&0x4));
 8002640:	4b0d      	ldr	r3, [pc, #52]	; (8002678 <lcd16x2_write4+0x7c>)
 8002642:	6818      	ldr	r0, [r3, #0]
 8002644:	4b0f      	ldr	r3, [pc, #60]	; (8002684 <lcd16x2_write4+0x88>)
 8002646:	8819      	ldrh	r1, [r3, #0]
 8002648:	79fb      	ldrb	r3, [r7, #7]
 800264a:	f003 0304 	and.w	r3, r3, #4
 800264e:	b2db      	uxtb	r3, r3
 8002650:	461a      	mov	r2, r3
 8002652:	f7ff f9bf 	bl	80019d4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(nib&0x8));
 8002656:	4b08      	ldr	r3, [pc, #32]	; (8002678 <lcd16x2_write4+0x7c>)
 8002658:	6818      	ldr	r0, [r3, #0]
 800265a:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <lcd16x2_write4+0x8c>)
 800265c:	8819      	ldrh	r1, [r3, #0]
 800265e:	79fb      	ldrb	r3, [r7, #7]
 8002660:	f003 0308 	and.w	r3, r3, #8
 8002664:	b2db      	uxtb	r3, r3
 8002666:	461a      	mov	r2, r3
 8002668:	f7ff f9b4 	bl	80019d4 <HAL_GPIO_WritePin>
  lcd16x2_enablePulse();
 800266c:	f7ff fe90 	bl	8002390 <lcd16x2_enablePulse>
}
 8002670:	bf00      	nop
 8002672:	3708      	adds	r7, #8
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	200000f8 	.word	0x200000f8
 800267c:	200000fc 	.word	0x200000fc
 8002680:	200000fe 	.word	0x200000fe
 8002684:	20000100 	.word	0x20000100
 8002688:	20000102 	.word	0x20000102

0800268c <lcd16x2_init_4bits>:
 * @param[in] x_pin GPIO pin (e.g. GPIO_PIN_1)
 */
void lcd16x2_init_4bits(
    GPIO_TypeDef* port_rs_e, uint16_t rs_pin, uint16_t e_pin,
    GPIO_TypeDef* port_4_7, uint16_t d4_pin, uint16_t d5_pin, uint16_t d6_pin, uint16_t d7_pin)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	607b      	str	r3, [r7, #4]
 8002696:	460b      	mov	r3, r1
 8002698:	817b      	strh	r3, [r7, #10]
 800269a:	4613      	mov	r3, r2
 800269c:	813b      	strh	r3, [r7, #8]
  DWT_Delay_Init();
 800269e:	f7ff fe23 	bl	80022e8 <DWT_Delay_Init>
  //Set GPIO Ports and Pins data
  PORT_RS_and_E = port_rs_e;
 80026a2:	4a24      	ldr	r2, [pc, #144]	; (8002734 <lcd16x2_init_4bits+0xa8>)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6013      	str	r3, [r2, #0]
  PIN_RS = rs_pin;
 80026a8:	4a23      	ldr	r2, [pc, #140]	; (8002738 <lcd16x2_init_4bits+0xac>)
 80026aa:	897b      	ldrh	r3, [r7, #10]
 80026ac:	8013      	strh	r3, [r2, #0]
  PIN_E = e_pin;
 80026ae:	4a23      	ldr	r2, [pc, #140]	; (800273c <lcd16x2_init_4bits+0xb0>)
 80026b0:	893b      	ldrh	r3, [r7, #8]
 80026b2:	8013      	strh	r3, [r2, #0]
  PORT_MSB = port_4_7;
 80026b4:	4a22      	ldr	r2, [pc, #136]	; (8002740 <lcd16x2_init_4bits+0xb4>)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6013      	str	r3, [r2, #0]
  D4_PIN = d4_pin;
 80026ba:	4a22      	ldr	r2, [pc, #136]	; (8002744 <lcd16x2_init_4bits+0xb8>)
 80026bc:	8b3b      	ldrh	r3, [r7, #24]
 80026be:	8013      	strh	r3, [r2, #0]
  D5_PIN = d5_pin;
 80026c0:	4a21      	ldr	r2, [pc, #132]	; (8002748 <lcd16x2_init_4bits+0xbc>)
 80026c2:	8bbb      	ldrh	r3, [r7, #28]
 80026c4:	8013      	strh	r3, [r2, #0]
  D6_PIN = d6_pin;
 80026c6:	4a21      	ldr	r2, [pc, #132]	; (800274c <lcd16x2_init_4bits+0xc0>)
 80026c8:	8c3b      	ldrh	r3, [r7, #32]
 80026ca:	8013      	strh	r3, [r2, #0]
  D7_PIN = d7_pin;
 80026cc:	4a20      	ldr	r2, [pc, #128]	; (8002750 <lcd16x2_init_4bits+0xc4>)
 80026ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80026d0:	8013      	strh	r3, [r2, #0]
  is8BitsMode = false;
 80026d2:	4b20      	ldr	r3, [pc, #128]	; (8002754 <lcd16x2_init_4bits+0xc8>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	701a      	strb	r2, [r3, #0]
  FunctionSet = 0x28;
 80026d8:	4b1f      	ldr	r3, [pc, #124]	; (8002758 <lcd16x2_init_4bits+0xcc>)
 80026da:	2228      	movs	r2, #40	; 0x28
 80026dc:	701a      	strb	r2, [r3, #0]

  //Initialise LCD
  //1. Wait at least 15ms
  LCD_MS_DELAY(20);
 80026de:	2014      	movs	r0, #20
 80026e0:	f7fe fad2 	bl	8000c88 <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_write4(0x3);
 80026e4:	2003      	movs	r0, #3
 80026e6:	f7ff ff89 	bl	80025fc <lcd16x2_write4>
  LCD_MS_DELAY(5);
 80026ea:	2005      	movs	r0, #5
 80026ec:	f7fe facc 	bl	8000c88 <HAL_Delay>
  lcd16x2_write4(0x3);
 80026f0:	2003      	movs	r0, #3
 80026f2:	f7ff ff83 	bl	80025fc <lcd16x2_write4>
  LCD_MS_DELAY(1);
 80026f6:	2001      	movs	r0, #1
 80026f8:	f7fe fac6 	bl	8000c88 <HAL_Delay>
  lcd16x2_write4(0x3);
 80026fc:	2003      	movs	r0, #3
 80026fe:	f7ff ff7d 	bl	80025fc <lcd16x2_write4>
  LCD_MS_DELAY(1);
 8002702:	2001      	movs	r0, #1
 8002704:	f7fe fac0 	bl	8000c88 <HAL_Delay>
  lcd16x2_write4(0x2);  //4 bit mode
 8002708:	2002      	movs	r0, #2
 800270a:	f7ff ff77 	bl	80025fc <lcd16x2_write4>
  LCD_MS_DELAY(1);
 800270e:	2001      	movs	r0, #1
 8002710:	f7fe faba 	bl	8000c88 <HAL_Delay>
  //4. Function set; Enable 2 lines, Data length to 4 bits
  lcd16x2_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 8002714:	2028      	movs	r0, #40	; 0x28
 8002716:	f7ff ff51 	bl	80025bc <lcd16x2_writeCommand>
  //3. Display control (Display ON, Cursor ON, blink cursor)
  lcd16x2_writeCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_B | LCD_DISPLAY_C | LCD_DISPLAY_D);
 800271a:	200f      	movs	r0, #15
 800271c:	f7ff ff4e 	bl	80025bc <lcd16x2_writeCommand>
  //4. Clear LCD and return home
  lcd16x2_writeCommand(LCD_CLEARDISPLAY);
 8002720:	2001      	movs	r0, #1
 8002722:	f7ff ff4b 	bl	80025bc <lcd16x2_writeCommand>
  LCD_MS_DELAY(3);
 8002726:	2003      	movs	r0, #3
 8002728:	f7fe faae 	bl	8000c88 <HAL_Delay>
}
 800272c:	bf00      	nop
 800272e:	3710      	adds	r7, #16
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	200000e4 	.word	0x200000e4
 8002738:	200000e8 	.word	0x200000e8
 800273c:	200000ea 	.word	0x200000ea
 8002740:	200000f8 	.word	0x200000f8
 8002744:	200000fc 	.word	0x200000fc
 8002748:	200000fe 	.word	0x200000fe
 800274c:	20000100 	.word	0x20000100
 8002750:	20000102 	.word	0x20000102
 8002754:	20000009 	.word	0x20000009
 8002758:	2000000b 	.word	0x2000000b

0800275c <lcd16x2_setCursor>:
 * @brief Set cursor position
 * @param[in] row - 0 or 1 for line1 or line2
 * @param[in] col - 0 - 15 (16 columns LCD)
 */
void lcd16x2_setCursor(uint8_t row, uint8_t col)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	4603      	mov	r3, r0
 8002764:	460a      	mov	r2, r1
 8002766:	71fb      	strb	r3, [r7, #7]
 8002768:	4613      	mov	r3, r2
 800276a:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;
  maskData = (col)&0x0F;
 800276c:	79bb      	ldrb	r3, [r7, #6]
 800276e:	f003 030f 	and.w	r3, r3, #15
 8002772:	73fb      	strb	r3, [r7, #15]
  if(row==0)
 8002774:	79fb      	ldrb	r3, [r7, #7]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d108      	bne.n	800278c <lcd16x2_setCursor+0x30>
  {
    maskData |= (0x80);
 800277a:	7bfb      	ldrb	r3, [r7, #15]
 800277c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002780:	73fb      	strb	r3, [r7, #15]
    lcd16x2_writeCommand(maskData);
 8002782:	7bfb      	ldrb	r3, [r7, #15]
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff ff19 	bl	80025bc <lcd16x2_writeCommand>
  else
  {
    maskData |= (0xc0);
    lcd16x2_writeCommand(maskData);
  }
}
 800278a:	e007      	b.n	800279c <lcd16x2_setCursor+0x40>
    maskData |= (0xc0);
 800278c:	7bfb      	ldrb	r3, [r7, #15]
 800278e:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002792:	73fb      	strb	r3, [r7, #15]
    lcd16x2_writeCommand(maskData);
 8002794:	7bfb      	ldrb	r3, [r7, #15]
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff ff10 	bl	80025bc <lcd16x2_writeCommand>
}
 800279c:	bf00      	nop
 800279e:	3710      	adds	r7, #16
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <lcd16x2_1stLine>:
/**
 * @brief Move to beginning of 1st line
 */
void lcd16x2_1stLine(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  lcd16x2_setCursor(0,0);
 80027a8:	2100      	movs	r1, #0
 80027aa:	2000      	movs	r0, #0
 80027ac:	f7ff ffd6 	bl	800275c <lcd16x2_setCursor>
}
 80027b0:	bf00      	nop
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <lcd16x2_2ndLine>:
/**
 * @brief Move to beginning of 2nd line
 */
void lcd16x2_2ndLine(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  lcd16x2_setCursor(1,0);
 80027b8:	2100      	movs	r1, #0
 80027ba:	2001      	movs	r0, #1
 80027bc:	f7ff ffce 	bl	800275c <lcd16x2_setCursor>
}
 80027c0:	bf00      	nop
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <lcd16x2_cursorShow>:

/**
 * @brief Cursor ON/OFF
 */
void lcd16x2_cursorShow(bool state)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	71fb      	strb	r3, [r7, #7]
  if(state)
 80027ce:	79fb      	ldrb	r3, [r7, #7]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00c      	beq.n	80027ee <lcd16x2_cursorShow+0x2a>
  {
    DisplayControl |= (0x03);
 80027d4:	4b0e      	ldr	r3, [pc, #56]	; (8002810 <lcd16x2_cursorShow+0x4c>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	f043 0303 	orr.w	r3, r3, #3
 80027dc:	b2da      	uxtb	r2, r3
 80027de:	4b0c      	ldr	r3, [pc, #48]	; (8002810 <lcd16x2_cursorShow+0x4c>)
 80027e0:	701a      	strb	r2, [r3, #0]
    lcd16x2_writeCommand(DisplayControl);
 80027e2:	4b0b      	ldr	r3, [pc, #44]	; (8002810 <lcd16x2_cursorShow+0x4c>)
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff fee8 	bl	80025bc <lcd16x2_writeCommand>
  else
  {
    DisplayControl &= ~(0x03);
    lcd16x2_writeCommand(DisplayControl);
  }
}
 80027ec:	e00b      	b.n	8002806 <lcd16x2_cursorShow+0x42>
    DisplayControl &= ~(0x03);
 80027ee:	4b08      	ldr	r3, [pc, #32]	; (8002810 <lcd16x2_cursorShow+0x4c>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	f023 0303 	bic.w	r3, r3, #3
 80027f6:	b2da      	uxtb	r2, r3
 80027f8:	4b05      	ldr	r3, [pc, #20]	; (8002810 <lcd16x2_cursorShow+0x4c>)
 80027fa:	701a      	strb	r2, [r3, #0]
    lcd16x2_writeCommand(DisplayControl);
 80027fc:	4b04      	ldr	r3, [pc, #16]	; (8002810 <lcd16x2_cursorShow+0x4c>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	4618      	mov	r0, r3
 8002802:	f7ff fedb 	bl	80025bc <lcd16x2_writeCommand>
}
 8002806:	bf00      	nop
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	2000000a 	.word	0x2000000a

08002814 <lcd16x2_clear>:

/**
 * @brief Display clear
 */
void lcd16x2_clear(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  lcd16x2_writeCommand(LCD_CLEARDISPLAY);
 8002818:	2001      	movs	r0, #1
 800281a:	f7ff fecf 	bl	80025bc <lcd16x2_writeCommand>
  LCD_MS_DELAY(3);
 800281e:	2003      	movs	r0, #3
 8002820:	f7fe fa32 	bl	8000c88 <HAL_Delay>
}
 8002824:	bf00      	nop
 8002826:	bd80      	pop	{r7, pc}

08002828 <lcd16x2_printf>:

/**
 * @brief Print to display any datatype (e.g. lcd16x2_printf("Value1 = %.1f", 123.45))
 */
void lcd16x2_printf(const char* str, ...)
{
 8002828:	b40f      	push	{r0, r1, r2, r3}
 800282a:	b590      	push	{r4, r7, lr}
 800282c:	b089      	sub	sp, #36	; 0x24
 800282e:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 8002830:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002834:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 8002836:	f107 0308 	add.w	r3, r7, #8
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800283e:	4618      	mov	r0, r3
 8002840:	f000 f86a 	bl	8002918 <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8002844:	2300      	movs	r3, #0
 8002846:	77fb      	strb	r3, [r7, #31]
 8002848:	e00a      	b.n	8002860 <lcd16x2_printf+0x38>
  {
    lcd16x2_writeData((uint8_t)stringArray[i]);
 800284a:	7ffb      	ldrb	r3, [r7, #31]
 800284c:	3320      	adds	r3, #32
 800284e:	443b      	add	r3, r7
 8002850:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff fec1 	bl	80025dc <lcd16x2_writeData>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 800285a:	7ffb      	ldrb	r3, [r7, #31]
 800285c:	3301      	adds	r3, #1
 800285e:	77fb      	strb	r3, [r7, #31]
 8002860:	7ffc      	ldrb	r4, [r7, #31]
 8002862:	f107 0308 	add.w	r3, r7, #8
 8002866:	4618      	mov	r0, r3
 8002868:	f7fd fcb2 	bl	80001d0 <strlen>
 800286c:	4603      	mov	r3, r0
 800286e:	429c      	cmp	r4, r3
 8002870:	d202      	bcs.n	8002878 <lcd16x2_printf+0x50>
 8002872:	7ffb      	ldrb	r3, [r7, #31]
 8002874:	2b0f      	cmp	r3, #15
 8002876:	d9e8      	bls.n	800284a <lcd16x2_printf+0x22>
  }
}
 8002878:	bf00      	nop
 800287a:	3724      	adds	r7, #36	; 0x24
 800287c:	46bd      	mov	sp, r7
 800287e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002882:	b004      	add	sp, #16
 8002884:	4770      	bx	lr
	...

08002888 <__errno>:
 8002888:	4b01      	ldr	r3, [pc, #4]	; (8002890 <__errno+0x8>)
 800288a:	6818      	ldr	r0, [r3, #0]
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	2000000c 	.word	0x2000000c

08002894 <__libc_init_array>:
 8002894:	b570      	push	{r4, r5, r6, lr}
 8002896:	4d0d      	ldr	r5, [pc, #52]	; (80028cc <__libc_init_array+0x38>)
 8002898:	4c0d      	ldr	r4, [pc, #52]	; (80028d0 <__libc_init_array+0x3c>)
 800289a:	1b64      	subs	r4, r4, r5
 800289c:	10a4      	asrs	r4, r4, #2
 800289e:	2600      	movs	r6, #0
 80028a0:	42a6      	cmp	r6, r4
 80028a2:	d109      	bne.n	80028b8 <__libc_init_array+0x24>
 80028a4:	4d0b      	ldr	r5, [pc, #44]	; (80028d4 <__libc_init_array+0x40>)
 80028a6:	4c0c      	ldr	r4, [pc, #48]	; (80028d8 <__libc_init_array+0x44>)
 80028a8:	f000 fc8e 	bl	80031c8 <_init>
 80028ac:	1b64      	subs	r4, r4, r5
 80028ae:	10a4      	asrs	r4, r4, #2
 80028b0:	2600      	movs	r6, #0
 80028b2:	42a6      	cmp	r6, r4
 80028b4:	d105      	bne.n	80028c2 <__libc_init_array+0x2e>
 80028b6:	bd70      	pop	{r4, r5, r6, pc}
 80028b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80028bc:	4798      	blx	r3
 80028be:	3601      	adds	r6, #1
 80028c0:	e7ee      	b.n	80028a0 <__libc_init_array+0xc>
 80028c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80028c6:	4798      	blx	r3
 80028c8:	3601      	adds	r6, #1
 80028ca:	e7f2      	b.n	80028b2 <__libc_init_array+0x1e>
 80028cc:	08003274 	.word	0x08003274
 80028d0:	08003274 	.word	0x08003274
 80028d4:	08003274 	.word	0x08003274
 80028d8:	08003278 	.word	0x08003278

080028dc <memset>:
 80028dc:	4402      	add	r2, r0
 80028de:	4603      	mov	r3, r0
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d100      	bne.n	80028e6 <memset+0xa>
 80028e4:	4770      	bx	lr
 80028e6:	f803 1b01 	strb.w	r1, [r3], #1
 80028ea:	e7f9      	b.n	80028e0 <memset+0x4>

080028ec <_vsiprintf_r>:
 80028ec:	b500      	push	{lr}
 80028ee:	b09b      	sub	sp, #108	; 0x6c
 80028f0:	9100      	str	r1, [sp, #0]
 80028f2:	9104      	str	r1, [sp, #16]
 80028f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80028f8:	9105      	str	r1, [sp, #20]
 80028fa:	9102      	str	r1, [sp, #8]
 80028fc:	4905      	ldr	r1, [pc, #20]	; (8002914 <_vsiprintf_r+0x28>)
 80028fe:	9103      	str	r1, [sp, #12]
 8002900:	4669      	mov	r1, sp
 8002902:	f000 f86f 	bl	80029e4 <_svfiprintf_r>
 8002906:	9b00      	ldr	r3, [sp, #0]
 8002908:	2200      	movs	r2, #0
 800290a:	701a      	strb	r2, [r3, #0]
 800290c:	b01b      	add	sp, #108	; 0x6c
 800290e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002912:	bf00      	nop
 8002914:	ffff0208 	.word	0xffff0208

08002918 <vsiprintf>:
 8002918:	4613      	mov	r3, r2
 800291a:	460a      	mov	r2, r1
 800291c:	4601      	mov	r1, r0
 800291e:	4802      	ldr	r0, [pc, #8]	; (8002928 <vsiprintf+0x10>)
 8002920:	6800      	ldr	r0, [r0, #0]
 8002922:	f7ff bfe3 	b.w	80028ec <_vsiprintf_r>
 8002926:	bf00      	nop
 8002928:	2000000c 	.word	0x2000000c

0800292c <__ssputs_r>:
 800292c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002930:	688e      	ldr	r6, [r1, #8]
 8002932:	429e      	cmp	r6, r3
 8002934:	4682      	mov	sl, r0
 8002936:	460c      	mov	r4, r1
 8002938:	4690      	mov	r8, r2
 800293a:	461f      	mov	r7, r3
 800293c:	d838      	bhi.n	80029b0 <__ssputs_r+0x84>
 800293e:	898a      	ldrh	r2, [r1, #12]
 8002940:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002944:	d032      	beq.n	80029ac <__ssputs_r+0x80>
 8002946:	6825      	ldr	r5, [r4, #0]
 8002948:	6909      	ldr	r1, [r1, #16]
 800294a:	eba5 0901 	sub.w	r9, r5, r1
 800294e:	6965      	ldr	r5, [r4, #20]
 8002950:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002954:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002958:	3301      	adds	r3, #1
 800295a:	444b      	add	r3, r9
 800295c:	106d      	asrs	r5, r5, #1
 800295e:	429d      	cmp	r5, r3
 8002960:	bf38      	it	cc
 8002962:	461d      	movcc	r5, r3
 8002964:	0553      	lsls	r3, r2, #21
 8002966:	d531      	bpl.n	80029cc <__ssputs_r+0xa0>
 8002968:	4629      	mov	r1, r5
 800296a:	f000 fb63 	bl	8003034 <_malloc_r>
 800296e:	4606      	mov	r6, r0
 8002970:	b950      	cbnz	r0, 8002988 <__ssputs_r+0x5c>
 8002972:	230c      	movs	r3, #12
 8002974:	f8ca 3000 	str.w	r3, [sl]
 8002978:	89a3      	ldrh	r3, [r4, #12]
 800297a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800297e:	81a3      	strh	r3, [r4, #12]
 8002980:	f04f 30ff 	mov.w	r0, #4294967295
 8002984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002988:	6921      	ldr	r1, [r4, #16]
 800298a:	464a      	mov	r2, r9
 800298c:	f000 fabe 	bl	8002f0c <memcpy>
 8002990:	89a3      	ldrh	r3, [r4, #12]
 8002992:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800299a:	81a3      	strh	r3, [r4, #12]
 800299c:	6126      	str	r6, [r4, #16]
 800299e:	6165      	str	r5, [r4, #20]
 80029a0:	444e      	add	r6, r9
 80029a2:	eba5 0509 	sub.w	r5, r5, r9
 80029a6:	6026      	str	r6, [r4, #0]
 80029a8:	60a5      	str	r5, [r4, #8]
 80029aa:	463e      	mov	r6, r7
 80029ac:	42be      	cmp	r6, r7
 80029ae:	d900      	bls.n	80029b2 <__ssputs_r+0x86>
 80029b0:	463e      	mov	r6, r7
 80029b2:	6820      	ldr	r0, [r4, #0]
 80029b4:	4632      	mov	r2, r6
 80029b6:	4641      	mov	r1, r8
 80029b8:	f000 fab6 	bl	8002f28 <memmove>
 80029bc:	68a3      	ldr	r3, [r4, #8]
 80029be:	1b9b      	subs	r3, r3, r6
 80029c0:	60a3      	str	r3, [r4, #8]
 80029c2:	6823      	ldr	r3, [r4, #0]
 80029c4:	4433      	add	r3, r6
 80029c6:	6023      	str	r3, [r4, #0]
 80029c8:	2000      	movs	r0, #0
 80029ca:	e7db      	b.n	8002984 <__ssputs_r+0x58>
 80029cc:	462a      	mov	r2, r5
 80029ce:	f000 fba5 	bl	800311c <_realloc_r>
 80029d2:	4606      	mov	r6, r0
 80029d4:	2800      	cmp	r0, #0
 80029d6:	d1e1      	bne.n	800299c <__ssputs_r+0x70>
 80029d8:	6921      	ldr	r1, [r4, #16]
 80029da:	4650      	mov	r0, sl
 80029dc:	f000 fabe 	bl	8002f5c <_free_r>
 80029e0:	e7c7      	b.n	8002972 <__ssputs_r+0x46>
	...

080029e4 <_svfiprintf_r>:
 80029e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029e8:	4698      	mov	r8, r3
 80029ea:	898b      	ldrh	r3, [r1, #12]
 80029ec:	061b      	lsls	r3, r3, #24
 80029ee:	b09d      	sub	sp, #116	; 0x74
 80029f0:	4607      	mov	r7, r0
 80029f2:	460d      	mov	r5, r1
 80029f4:	4614      	mov	r4, r2
 80029f6:	d50e      	bpl.n	8002a16 <_svfiprintf_r+0x32>
 80029f8:	690b      	ldr	r3, [r1, #16]
 80029fa:	b963      	cbnz	r3, 8002a16 <_svfiprintf_r+0x32>
 80029fc:	2140      	movs	r1, #64	; 0x40
 80029fe:	f000 fb19 	bl	8003034 <_malloc_r>
 8002a02:	6028      	str	r0, [r5, #0]
 8002a04:	6128      	str	r0, [r5, #16]
 8002a06:	b920      	cbnz	r0, 8002a12 <_svfiprintf_r+0x2e>
 8002a08:	230c      	movs	r3, #12
 8002a0a:	603b      	str	r3, [r7, #0]
 8002a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a10:	e0d1      	b.n	8002bb6 <_svfiprintf_r+0x1d2>
 8002a12:	2340      	movs	r3, #64	; 0x40
 8002a14:	616b      	str	r3, [r5, #20]
 8002a16:	2300      	movs	r3, #0
 8002a18:	9309      	str	r3, [sp, #36]	; 0x24
 8002a1a:	2320      	movs	r3, #32
 8002a1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002a20:	f8cd 800c 	str.w	r8, [sp, #12]
 8002a24:	2330      	movs	r3, #48	; 0x30
 8002a26:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002bd0 <_svfiprintf_r+0x1ec>
 8002a2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002a2e:	f04f 0901 	mov.w	r9, #1
 8002a32:	4623      	mov	r3, r4
 8002a34:	469a      	mov	sl, r3
 8002a36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002a3a:	b10a      	cbz	r2, 8002a40 <_svfiprintf_r+0x5c>
 8002a3c:	2a25      	cmp	r2, #37	; 0x25
 8002a3e:	d1f9      	bne.n	8002a34 <_svfiprintf_r+0x50>
 8002a40:	ebba 0b04 	subs.w	fp, sl, r4
 8002a44:	d00b      	beq.n	8002a5e <_svfiprintf_r+0x7a>
 8002a46:	465b      	mov	r3, fp
 8002a48:	4622      	mov	r2, r4
 8002a4a:	4629      	mov	r1, r5
 8002a4c:	4638      	mov	r0, r7
 8002a4e:	f7ff ff6d 	bl	800292c <__ssputs_r>
 8002a52:	3001      	adds	r0, #1
 8002a54:	f000 80aa 	beq.w	8002bac <_svfiprintf_r+0x1c8>
 8002a58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002a5a:	445a      	add	r2, fp
 8002a5c:	9209      	str	r2, [sp, #36]	; 0x24
 8002a5e:	f89a 3000 	ldrb.w	r3, [sl]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	f000 80a2 	beq.w	8002bac <_svfiprintf_r+0x1c8>
 8002a68:	2300      	movs	r3, #0
 8002a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8002a6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002a72:	f10a 0a01 	add.w	sl, sl, #1
 8002a76:	9304      	str	r3, [sp, #16]
 8002a78:	9307      	str	r3, [sp, #28]
 8002a7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002a7e:	931a      	str	r3, [sp, #104]	; 0x68
 8002a80:	4654      	mov	r4, sl
 8002a82:	2205      	movs	r2, #5
 8002a84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a88:	4851      	ldr	r0, [pc, #324]	; (8002bd0 <_svfiprintf_r+0x1ec>)
 8002a8a:	f7fd fba9 	bl	80001e0 <memchr>
 8002a8e:	9a04      	ldr	r2, [sp, #16]
 8002a90:	b9d8      	cbnz	r0, 8002aca <_svfiprintf_r+0xe6>
 8002a92:	06d0      	lsls	r0, r2, #27
 8002a94:	bf44      	itt	mi
 8002a96:	2320      	movmi	r3, #32
 8002a98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002a9c:	0711      	lsls	r1, r2, #28
 8002a9e:	bf44      	itt	mi
 8002aa0:	232b      	movmi	r3, #43	; 0x2b
 8002aa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002aa6:	f89a 3000 	ldrb.w	r3, [sl]
 8002aaa:	2b2a      	cmp	r3, #42	; 0x2a
 8002aac:	d015      	beq.n	8002ada <_svfiprintf_r+0xf6>
 8002aae:	9a07      	ldr	r2, [sp, #28]
 8002ab0:	4654      	mov	r4, sl
 8002ab2:	2000      	movs	r0, #0
 8002ab4:	f04f 0c0a 	mov.w	ip, #10
 8002ab8:	4621      	mov	r1, r4
 8002aba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002abe:	3b30      	subs	r3, #48	; 0x30
 8002ac0:	2b09      	cmp	r3, #9
 8002ac2:	d94e      	bls.n	8002b62 <_svfiprintf_r+0x17e>
 8002ac4:	b1b0      	cbz	r0, 8002af4 <_svfiprintf_r+0x110>
 8002ac6:	9207      	str	r2, [sp, #28]
 8002ac8:	e014      	b.n	8002af4 <_svfiprintf_r+0x110>
 8002aca:	eba0 0308 	sub.w	r3, r0, r8
 8002ace:	fa09 f303 	lsl.w	r3, r9, r3
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	9304      	str	r3, [sp, #16]
 8002ad6:	46a2      	mov	sl, r4
 8002ad8:	e7d2      	b.n	8002a80 <_svfiprintf_r+0x9c>
 8002ada:	9b03      	ldr	r3, [sp, #12]
 8002adc:	1d19      	adds	r1, r3, #4
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	9103      	str	r1, [sp, #12]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	bfbb      	ittet	lt
 8002ae6:	425b      	neglt	r3, r3
 8002ae8:	f042 0202 	orrlt.w	r2, r2, #2
 8002aec:	9307      	strge	r3, [sp, #28]
 8002aee:	9307      	strlt	r3, [sp, #28]
 8002af0:	bfb8      	it	lt
 8002af2:	9204      	strlt	r2, [sp, #16]
 8002af4:	7823      	ldrb	r3, [r4, #0]
 8002af6:	2b2e      	cmp	r3, #46	; 0x2e
 8002af8:	d10c      	bne.n	8002b14 <_svfiprintf_r+0x130>
 8002afa:	7863      	ldrb	r3, [r4, #1]
 8002afc:	2b2a      	cmp	r3, #42	; 0x2a
 8002afe:	d135      	bne.n	8002b6c <_svfiprintf_r+0x188>
 8002b00:	9b03      	ldr	r3, [sp, #12]
 8002b02:	1d1a      	adds	r2, r3, #4
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	9203      	str	r2, [sp, #12]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	bfb8      	it	lt
 8002b0c:	f04f 33ff 	movlt.w	r3, #4294967295
 8002b10:	3402      	adds	r4, #2
 8002b12:	9305      	str	r3, [sp, #20]
 8002b14:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002be0 <_svfiprintf_r+0x1fc>
 8002b18:	7821      	ldrb	r1, [r4, #0]
 8002b1a:	2203      	movs	r2, #3
 8002b1c:	4650      	mov	r0, sl
 8002b1e:	f7fd fb5f 	bl	80001e0 <memchr>
 8002b22:	b140      	cbz	r0, 8002b36 <_svfiprintf_r+0x152>
 8002b24:	2340      	movs	r3, #64	; 0x40
 8002b26:	eba0 000a 	sub.w	r0, r0, sl
 8002b2a:	fa03 f000 	lsl.w	r0, r3, r0
 8002b2e:	9b04      	ldr	r3, [sp, #16]
 8002b30:	4303      	orrs	r3, r0
 8002b32:	3401      	adds	r4, #1
 8002b34:	9304      	str	r3, [sp, #16]
 8002b36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b3a:	4826      	ldr	r0, [pc, #152]	; (8002bd4 <_svfiprintf_r+0x1f0>)
 8002b3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002b40:	2206      	movs	r2, #6
 8002b42:	f7fd fb4d 	bl	80001e0 <memchr>
 8002b46:	2800      	cmp	r0, #0
 8002b48:	d038      	beq.n	8002bbc <_svfiprintf_r+0x1d8>
 8002b4a:	4b23      	ldr	r3, [pc, #140]	; (8002bd8 <_svfiprintf_r+0x1f4>)
 8002b4c:	bb1b      	cbnz	r3, 8002b96 <_svfiprintf_r+0x1b2>
 8002b4e:	9b03      	ldr	r3, [sp, #12]
 8002b50:	3307      	adds	r3, #7
 8002b52:	f023 0307 	bic.w	r3, r3, #7
 8002b56:	3308      	adds	r3, #8
 8002b58:	9303      	str	r3, [sp, #12]
 8002b5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b5c:	4433      	add	r3, r6
 8002b5e:	9309      	str	r3, [sp, #36]	; 0x24
 8002b60:	e767      	b.n	8002a32 <_svfiprintf_r+0x4e>
 8002b62:	fb0c 3202 	mla	r2, ip, r2, r3
 8002b66:	460c      	mov	r4, r1
 8002b68:	2001      	movs	r0, #1
 8002b6a:	e7a5      	b.n	8002ab8 <_svfiprintf_r+0xd4>
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	3401      	adds	r4, #1
 8002b70:	9305      	str	r3, [sp, #20]
 8002b72:	4619      	mov	r1, r3
 8002b74:	f04f 0c0a 	mov.w	ip, #10
 8002b78:	4620      	mov	r0, r4
 8002b7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002b7e:	3a30      	subs	r2, #48	; 0x30
 8002b80:	2a09      	cmp	r2, #9
 8002b82:	d903      	bls.n	8002b8c <_svfiprintf_r+0x1a8>
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d0c5      	beq.n	8002b14 <_svfiprintf_r+0x130>
 8002b88:	9105      	str	r1, [sp, #20]
 8002b8a:	e7c3      	b.n	8002b14 <_svfiprintf_r+0x130>
 8002b8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002b90:	4604      	mov	r4, r0
 8002b92:	2301      	movs	r3, #1
 8002b94:	e7f0      	b.n	8002b78 <_svfiprintf_r+0x194>
 8002b96:	ab03      	add	r3, sp, #12
 8002b98:	9300      	str	r3, [sp, #0]
 8002b9a:	462a      	mov	r2, r5
 8002b9c:	4b0f      	ldr	r3, [pc, #60]	; (8002bdc <_svfiprintf_r+0x1f8>)
 8002b9e:	a904      	add	r1, sp, #16
 8002ba0:	4638      	mov	r0, r7
 8002ba2:	f3af 8000 	nop.w
 8002ba6:	1c42      	adds	r2, r0, #1
 8002ba8:	4606      	mov	r6, r0
 8002baa:	d1d6      	bne.n	8002b5a <_svfiprintf_r+0x176>
 8002bac:	89ab      	ldrh	r3, [r5, #12]
 8002bae:	065b      	lsls	r3, r3, #25
 8002bb0:	f53f af2c 	bmi.w	8002a0c <_svfiprintf_r+0x28>
 8002bb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002bb6:	b01d      	add	sp, #116	; 0x74
 8002bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bbc:	ab03      	add	r3, sp, #12
 8002bbe:	9300      	str	r3, [sp, #0]
 8002bc0:	462a      	mov	r2, r5
 8002bc2:	4b06      	ldr	r3, [pc, #24]	; (8002bdc <_svfiprintf_r+0x1f8>)
 8002bc4:	a904      	add	r1, sp, #16
 8002bc6:	4638      	mov	r0, r7
 8002bc8:	f000 f87a 	bl	8002cc0 <_printf_i>
 8002bcc:	e7eb      	b.n	8002ba6 <_svfiprintf_r+0x1c2>
 8002bce:	bf00      	nop
 8002bd0:	08003238 	.word	0x08003238
 8002bd4:	08003242 	.word	0x08003242
 8002bd8:	00000000 	.word	0x00000000
 8002bdc:	0800292d 	.word	0x0800292d
 8002be0:	0800323e 	.word	0x0800323e

08002be4 <_printf_common>:
 8002be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002be8:	4616      	mov	r6, r2
 8002bea:	4699      	mov	r9, r3
 8002bec:	688a      	ldr	r2, [r1, #8]
 8002bee:	690b      	ldr	r3, [r1, #16]
 8002bf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	bfb8      	it	lt
 8002bf8:	4613      	movlt	r3, r2
 8002bfa:	6033      	str	r3, [r6, #0]
 8002bfc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002c00:	4607      	mov	r7, r0
 8002c02:	460c      	mov	r4, r1
 8002c04:	b10a      	cbz	r2, 8002c0a <_printf_common+0x26>
 8002c06:	3301      	adds	r3, #1
 8002c08:	6033      	str	r3, [r6, #0]
 8002c0a:	6823      	ldr	r3, [r4, #0]
 8002c0c:	0699      	lsls	r1, r3, #26
 8002c0e:	bf42      	ittt	mi
 8002c10:	6833      	ldrmi	r3, [r6, #0]
 8002c12:	3302      	addmi	r3, #2
 8002c14:	6033      	strmi	r3, [r6, #0]
 8002c16:	6825      	ldr	r5, [r4, #0]
 8002c18:	f015 0506 	ands.w	r5, r5, #6
 8002c1c:	d106      	bne.n	8002c2c <_printf_common+0x48>
 8002c1e:	f104 0a19 	add.w	sl, r4, #25
 8002c22:	68e3      	ldr	r3, [r4, #12]
 8002c24:	6832      	ldr	r2, [r6, #0]
 8002c26:	1a9b      	subs	r3, r3, r2
 8002c28:	42ab      	cmp	r3, r5
 8002c2a:	dc26      	bgt.n	8002c7a <_printf_common+0x96>
 8002c2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002c30:	1e13      	subs	r3, r2, #0
 8002c32:	6822      	ldr	r2, [r4, #0]
 8002c34:	bf18      	it	ne
 8002c36:	2301      	movne	r3, #1
 8002c38:	0692      	lsls	r2, r2, #26
 8002c3a:	d42b      	bmi.n	8002c94 <_printf_common+0xb0>
 8002c3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002c40:	4649      	mov	r1, r9
 8002c42:	4638      	mov	r0, r7
 8002c44:	47c0      	blx	r8
 8002c46:	3001      	adds	r0, #1
 8002c48:	d01e      	beq.n	8002c88 <_printf_common+0xa4>
 8002c4a:	6823      	ldr	r3, [r4, #0]
 8002c4c:	68e5      	ldr	r5, [r4, #12]
 8002c4e:	6832      	ldr	r2, [r6, #0]
 8002c50:	f003 0306 	and.w	r3, r3, #6
 8002c54:	2b04      	cmp	r3, #4
 8002c56:	bf08      	it	eq
 8002c58:	1aad      	subeq	r5, r5, r2
 8002c5a:	68a3      	ldr	r3, [r4, #8]
 8002c5c:	6922      	ldr	r2, [r4, #16]
 8002c5e:	bf0c      	ite	eq
 8002c60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002c64:	2500      	movne	r5, #0
 8002c66:	4293      	cmp	r3, r2
 8002c68:	bfc4      	itt	gt
 8002c6a:	1a9b      	subgt	r3, r3, r2
 8002c6c:	18ed      	addgt	r5, r5, r3
 8002c6e:	2600      	movs	r6, #0
 8002c70:	341a      	adds	r4, #26
 8002c72:	42b5      	cmp	r5, r6
 8002c74:	d11a      	bne.n	8002cac <_printf_common+0xc8>
 8002c76:	2000      	movs	r0, #0
 8002c78:	e008      	b.n	8002c8c <_printf_common+0xa8>
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	4652      	mov	r2, sl
 8002c7e:	4649      	mov	r1, r9
 8002c80:	4638      	mov	r0, r7
 8002c82:	47c0      	blx	r8
 8002c84:	3001      	adds	r0, #1
 8002c86:	d103      	bne.n	8002c90 <_printf_common+0xac>
 8002c88:	f04f 30ff 	mov.w	r0, #4294967295
 8002c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c90:	3501      	adds	r5, #1
 8002c92:	e7c6      	b.n	8002c22 <_printf_common+0x3e>
 8002c94:	18e1      	adds	r1, r4, r3
 8002c96:	1c5a      	adds	r2, r3, #1
 8002c98:	2030      	movs	r0, #48	; 0x30
 8002c9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002c9e:	4422      	add	r2, r4
 8002ca0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002ca4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002ca8:	3302      	adds	r3, #2
 8002caa:	e7c7      	b.n	8002c3c <_printf_common+0x58>
 8002cac:	2301      	movs	r3, #1
 8002cae:	4622      	mov	r2, r4
 8002cb0:	4649      	mov	r1, r9
 8002cb2:	4638      	mov	r0, r7
 8002cb4:	47c0      	blx	r8
 8002cb6:	3001      	adds	r0, #1
 8002cb8:	d0e6      	beq.n	8002c88 <_printf_common+0xa4>
 8002cba:	3601      	adds	r6, #1
 8002cbc:	e7d9      	b.n	8002c72 <_printf_common+0x8e>
	...

08002cc0 <_printf_i>:
 8002cc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002cc4:	7e0f      	ldrb	r7, [r1, #24]
 8002cc6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002cc8:	2f78      	cmp	r7, #120	; 0x78
 8002cca:	4691      	mov	r9, r2
 8002ccc:	4680      	mov	r8, r0
 8002cce:	460c      	mov	r4, r1
 8002cd0:	469a      	mov	sl, r3
 8002cd2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002cd6:	d807      	bhi.n	8002ce8 <_printf_i+0x28>
 8002cd8:	2f62      	cmp	r7, #98	; 0x62
 8002cda:	d80a      	bhi.n	8002cf2 <_printf_i+0x32>
 8002cdc:	2f00      	cmp	r7, #0
 8002cde:	f000 80d8 	beq.w	8002e92 <_printf_i+0x1d2>
 8002ce2:	2f58      	cmp	r7, #88	; 0x58
 8002ce4:	f000 80a3 	beq.w	8002e2e <_printf_i+0x16e>
 8002ce8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002cec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002cf0:	e03a      	b.n	8002d68 <_printf_i+0xa8>
 8002cf2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002cf6:	2b15      	cmp	r3, #21
 8002cf8:	d8f6      	bhi.n	8002ce8 <_printf_i+0x28>
 8002cfa:	a101      	add	r1, pc, #4	; (adr r1, 8002d00 <_printf_i+0x40>)
 8002cfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002d00:	08002d59 	.word	0x08002d59
 8002d04:	08002d6d 	.word	0x08002d6d
 8002d08:	08002ce9 	.word	0x08002ce9
 8002d0c:	08002ce9 	.word	0x08002ce9
 8002d10:	08002ce9 	.word	0x08002ce9
 8002d14:	08002ce9 	.word	0x08002ce9
 8002d18:	08002d6d 	.word	0x08002d6d
 8002d1c:	08002ce9 	.word	0x08002ce9
 8002d20:	08002ce9 	.word	0x08002ce9
 8002d24:	08002ce9 	.word	0x08002ce9
 8002d28:	08002ce9 	.word	0x08002ce9
 8002d2c:	08002e79 	.word	0x08002e79
 8002d30:	08002d9d 	.word	0x08002d9d
 8002d34:	08002e5b 	.word	0x08002e5b
 8002d38:	08002ce9 	.word	0x08002ce9
 8002d3c:	08002ce9 	.word	0x08002ce9
 8002d40:	08002e9b 	.word	0x08002e9b
 8002d44:	08002ce9 	.word	0x08002ce9
 8002d48:	08002d9d 	.word	0x08002d9d
 8002d4c:	08002ce9 	.word	0x08002ce9
 8002d50:	08002ce9 	.word	0x08002ce9
 8002d54:	08002e63 	.word	0x08002e63
 8002d58:	682b      	ldr	r3, [r5, #0]
 8002d5a:	1d1a      	adds	r2, r3, #4
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	602a      	str	r2, [r5, #0]
 8002d60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e0a3      	b.n	8002eb4 <_printf_i+0x1f4>
 8002d6c:	6820      	ldr	r0, [r4, #0]
 8002d6e:	6829      	ldr	r1, [r5, #0]
 8002d70:	0606      	lsls	r6, r0, #24
 8002d72:	f101 0304 	add.w	r3, r1, #4
 8002d76:	d50a      	bpl.n	8002d8e <_printf_i+0xce>
 8002d78:	680e      	ldr	r6, [r1, #0]
 8002d7a:	602b      	str	r3, [r5, #0]
 8002d7c:	2e00      	cmp	r6, #0
 8002d7e:	da03      	bge.n	8002d88 <_printf_i+0xc8>
 8002d80:	232d      	movs	r3, #45	; 0x2d
 8002d82:	4276      	negs	r6, r6
 8002d84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d88:	485e      	ldr	r0, [pc, #376]	; (8002f04 <_printf_i+0x244>)
 8002d8a:	230a      	movs	r3, #10
 8002d8c:	e019      	b.n	8002dc2 <_printf_i+0x102>
 8002d8e:	680e      	ldr	r6, [r1, #0]
 8002d90:	602b      	str	r3, [r5, #0]
 8002d92:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002d96:	bf18      	it	ne
 8002d98:	b236      	sxthne	r6, r6
 8002d9a:	e7ef      	b.n	8002d7c <_printf_i+0xbc>
 8002d9c:	682b      	ldr	r3, [r5, #0]
 8002d9e:	6820      	ldr	r0, [r4, #0]
 8002da0:	1d19      	adds	r1, r3, #4
 8002da2:	6029      	str	r1, [r5, #0]
 8002da4:	0601      	lsls	r1, r0, #24
 8002da6:	d501      	bpl.n	8002dac <_printf_i+0xec>
 8002da8:	681e      	ldr	r6, [r3, #0]
 8002daa:	e002      	b.n	8002db2 <_printf_i+0xf2>
 8002dac:	0646      	lsls	r6, r0, #25
 8002dae:	d5fb      	bpl.n	8002da8 <_printf_i+0xe8>
 8002db0:	881e      	ldrh	r6, [r3, #0]
 8002db2:	4854      	ldr	r0, [pc, #336]	; (8002f04 <_printf_i+0x244>)
 8002db4:	2f6f      	cmp	r7, #111	; 0x6f
 8002db6:	bf0c      	ite	eq
 8002db8:	2308      	moveq	r3, #8
 8002dba:	230a      	movne	r3, #10
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002dc2:	6865      	ldr	r5, [r4, #4]
 8002dc4:	60a5      	str	r5, [r4, #8]
 8002dc6:	2d00      	cmp	r5, #0
 8002dc8:	bfa2      	ittt	ge
 8002dca:	6821      	ldrge	r1, [r4, #0]
 8002dcc:	f021 0104 	bicge.w	r1, r1, #4
 8002dd0:	6021      	strge	r1, [r4, #0]
 8002dd2:	b90e      	cbnz	r6, 8002dd8 <_printf_i+0x118>
 8002dd4:	2d00      	cmp	r5, #0
 8002dd6:	d04d      	beq.n	8002e74 <_printf_i+0x1b4>
 8002dd8:	4615      	mov	r5, r2
 8002dda:	fbb6 f1f3 	udiv	r1, r6, r3
 8002dde:	fb03 6711 	mls	r7, r3, r1, r6
 8002de2:	5dc7      	ldrb	r7, [r0, r7]
 8002de4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002de8:	4637      	mov	r7, r6
 8002dea:	42bb      	cmp	r3, r7
 8002dec:	460e      	mov	r6, r1
 8002dee:	d9f4      	bls.n	8002dda <_printf_i+0x11a>
 8002df0:	2b08      	cmp	r3, #8
 8002df2:	d10b      	bne.n	8002e0c <_printf_i+0x14c>
 8002df4:	6823      	ldr	r3, [r4, #0]
 8002df6:	07de      	lsls	r6, r3, #31
 8002df8:	d508      	bpl.n	8002e0c <_printf_i+0x14c>
 8002dfa:	6923      	ldr	r3, [r4, #16]
 8002dfc:	6861      	ldr	r1, [r4, #4]
 8002dfe:	4299      	cmp	r1, r3
 8002e00:	bfde      	ittt	le
 8002e02:	2330      	movle	r3, #48	; 0x30
 8002e04:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002e08:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002e0c:	1b52      	subs	r2, r2, r5
 8002e0e:	6122      	str	r2, [r4, #16]
 8002e10:	f8cd a000 	str.w	sl, [sp]
 8002e14:	464b      	mov	r3, r9
 8002e16:	aa03      	add	r2, sp, #12
 8002e18:	4621      	mov	r1, r4
 8002e1a:	4640      	mov	r0, r8
 8002e1c:	f7ff fee2 	bl	8002be4 <_printf_common>
 8002e20:	3001      	adds	r0, #1
 8002e22:	d14c      	bne.n	8002ebe <_printf_i+0x1fe>
 8002e24:	f04f 30ff 	mov.w	r0, #4294967295
 8002e28:	b004      	add	sp, #16
 8002e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e2e:	4835      	ldr	r0, [pc, #212]	; (8002f04 <_printf_i+0x244>)
 8002e30:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002e34:	6829      	ldr	r1, [r5, #0]
 8002e36:	6823      	ldr	r3, [r4, #0]
 8002e38:	f851 6b04 	ldr.w	r6, [r1], #4
 8002e3c:	6029      	str	r1, [r5, #0]
 8002e3e:	061d      	lsls	r5, r3, #24
 8002e40:	d514      	bpl.n	8002e6c <_printf_i+0x1ac>
 8002e42:	07df      	lsls	r7, r3, #31
 8002e44:	bf44      	itt	mi
 8002e46:	f043 0320 	orrmi.w	r3, r3, #32
 8002e4a:	6023      	strmi	r3, [r4, #0]
 8002e4c:	b91e      	cbnz	r6, 8002e56 <_printf_i+0x196>
 8002e4e:	6823      	ldr	r3, [r4, #0]
 8002e50:	f023 0320 	bic.w	r3, r3, #32
 8002e54:	6023      	str	r3, [r4, #0]
 8002e56:	2310      	movs	r3, #16
 8002e58:	e7b0      	b.n	8002dbc <_printf_i+0xfc>
 8002e5a:	6823      	ldr	r3, [r4, #0]
 8002e5c:	f043 0320 	orr.w	r3, r3, #32
 8002e60:	6023      	str	r3, [r4, #0]
 8002e62:	2378      	movs	r3, #120	; 0x78
 8002e64:	4828      	ldr	r0, [pc, #160]	; (8002f08 <_printf_i+0x248>)
 8002e66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002e6a:	e7e3      	b.n	8002e34 <_printf_i+0x174>
 8002e6c:	0659      	lsls	r1, r3, #25
 8002e6e:	bf48      	it	mi
 8002e70:	b2b6      	uxthmi	r6, r6
 8002e72:	e7e6      	b.n	8002e42 <_printf_i+0x182>
 8002e74:	4615      	mov	r5, r2
 8002e76:	e7bb      	b.n	8002df0 <_printf_i+0x130>
 8002e78:	682b      	ldr	r3, [r5, #0]
 8002e7a:	6826      	ldr	r6, [r4, #0]
 8002e7c:	6961      	ldr	r1, [r4, #20]
 8002e7e:	1d18      	adds	r0, r3, #4
 8002e80:	6028      	str	r0, [r5, #0]
 8002e82:	0635      	lsls	r5, r6, #24
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	d501      	bpl.n	8002e8c <_printf_i+0x1cc>
 8002e88:	6019      	str	r1, [r3, #0]
 8002e8a:	e002      	b.n	8002e92 <_printf_i+0x1d2>
 8002e8c:	0670      	lsls	r0, r6, #25
 8002e8e:	d5fb      	bpl.n	8002e88 <_printf_i+0x1c8>
 8002e90:	8019      	strh	r1, [r3, #0]
 8002e92:	2300      	movs	r3, #0
 8002e94:	6123      	str	r3, [r4, #16]
 8002e96:	4615      	mov	r5, r2
 8002e98:	e7ba      	b.n	8002e10 <_printf_i+0x150>
 8002e9a:	682b      	ldr	r3, [r5, #0]
 8002e9c:	1d1a      	adds	r2, r3, #4
 8002e9e:	602a      	str	r2, [r5, #0]
 8002ea0:	681d      	ldr	r5, [r3, #0]
 8002ea2:	6862      	ldr	r2, [r4, #4]
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	4628      	mov	r0, r5
 8002ea8:	f7fd f99a 	bl	80001e0 <memchr>
 8002eac:	b108      	cbz	r0, 8002eb2 <_printf_i+0x1f2>
 8002eae:	1b40      	subs	r0, r0, r5
 8002eb0:	6060      	str	r0, [r4, #4]
 8002eb2:	6863      	ldr	r3, [r4, #4]
 8002eb4:	6123      	str	r3, [r4, #16]
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ebc:	e7a8      	b.n	8002e10 <_printf_i+0x150>
 8002ebe:	6923      	ldr	r3, [r4, #16]
 8002ec0:	462a      	mov	r2, r5
 8002ec2:	4649      	mov	r1, r9
 8002ec4:	4640      	mov	r0, r8
 8002ec6:	47d0      	blx	sl
 8002ec8:	3001      	adds	r0, #1
 8002eca:	d0ab      	beq.n	8002e24 <_printf_i+0x164>
 8002ecc:	6823      	ldr	r3, [r4, #0]
 8002ece:	079b      	lsls	r3, r3, #30
 8002ed0:	d413      	bmi.n	8002efa <_printf_i+0x23a>
 8002ed2:	68e0      	ldr	r0, [r4, #12]
 8002ed4:	9b03      	ldr	r3, [sp, #12]
 8002ed6:	4298      	cmp	r0, r3
 8002ed8:	bfb8      	it	lt
 8002eda:	4618      	movlt	r0, r3
 8002edc:	e7a4      	b.n	8002e28 <_printf_i+0x168>
 8002ede:	2301      	movs	r3, #1
 8002ee0:	4632      	mov	r2, r6
 8002ee2:	4649      	mov	r1, r9
 8002ee4:	4640      	mov	r0, r8
 8002ee6:	47d0      	blx	sl
 8002ee8:	3001      	adds	r0, #1
 8002eea:	d09b      	beq.n	8002e24 <_printf_i+0x164>
 8002eec:	3501      	adds	r5, #1
 8002eee:	68e3      	ldr	r3, [r4, #12]
 8002ef0:	9903      	ldr	r1, [sp, #12]
 8002ef2:	1a5b      	subs	r3, r3, r1
 8002ef4:	42ab      	cmp	r3, r5
 8002ef6:	dcf2      	bgt.n	8002ede <_printf_i+0x21e>
 8002ef8:	e7eb      	b.n	8002ed2 <_printf_i+0x212>
 8002efa:	2500      	movs	r5, #0
 8002efc:	f104 0619 	add.w	r6, r4, #25
 8002f00:	e7f5      	b.n	8002eee <_printf_i+0x22e>
 8002f02:	bf00      	nop
 8002f04:	08003249 	.word	0x08003249
 8002f08:	0800325a 	.word	0x0800325a

08002f0c <memcpy>:
 8002f0c:	440a      	add	r2, r1
 8002f0e:	4291      	cmp	r1, r2
 8002f10:	f100 33ff 	add.w	r3, r0, #4294967295
 8002f14:	d100      	bne.n	8002f18 <memcpy+0xc>
 8002f16:	4770      	bx	lr
 8002f18:	b510      	push	{r4, lr}
 8002f1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f22:	4291      	cmp	r1, r2
 8002f24:	d1f9      	bne.n	8002f1a <memcpy+0xe>
 8002f26:	bd10      	pop	{r4, pc}

08002f28 <memmove>:
 8002f28:	4288      	cmp	r0, r1
 8002f2a:	b510      	push	{r4, lr}
 8002f2c:	eb01 0402 	add.w	r4, r1, r2
 8002f30:	d902      	bls.n	8002f38 <memmove+0x10>
 8002f32:	4284      	cmp	r4, r0
 8002f34:	4623      	mov	r3, r4
 8002f36:	d807      	bhi.n	8002f48 <memmove+0x20>
 8002f38:	1e43      	subs	r3, r0, #1
 8002f3a:	42a1      	cmp	r1, r4
 8002f3c:	d008      	beq.n	8002f50 <memmove+0x28>
 8002f3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002f42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002f46:	e7f8      	b.n	8002f3a <memmove+0x12>
 8002f48:	4402      	add	r2, r0
 8002f4a:	4601      	mov	r1, r0
 8002f4c:	428a      	cmp	r2, r1
 8002f4e:	d100      	bne.n	8002f52 <memmove+0x2a>
 8002f50:	bd10      	pop	{r4, pc}
 8002f52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002f56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002f5a:	e7f7      	b.n	8002f4c <memmove+0x24>

08002f5c <_free_r>:
 8002f5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002f5e:	2900      	cmp	r1, #0
 8002f60:	d044      	beq.n	8002fec <_free_r+0x90>
 8002f62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f66:	9001      	str	r0, [sp, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f1a1 0404 	sub.w	r4, r1, #4
 8002f6e:	bfb8      	it	lt
 8002f70:	18e4      	addlt	r4, r4, r3
 8002f72:	f000 f913 	bl	800319c <__malloc_lock>
 8002f76:	4a1e      	ldr	r2, [pc, #120]	; (8002ff0 <_free_r+0x94>)
 8002f78:	9801      	ldr	r0, [sp, #4]
 8002f7a:	6813      	ldr	r3, [r2, #0]
 8002f7c:	b933      	cbnz	r3, 8002f8c <_free_r+0x30>
 8002f7e:	6063      	str	r3, [r4, #4]
 8002f80:	6014      	str	r4, [r2, #0]
 8002f82:	b003      	add	sp, #12
 8002f84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002f88:	f000 b90e 	b.w	80031a8 <__malloc_unlock>
 8002f8c:	42a3      	cmp	r3, r4
 8002f8e:	d908      	bls.n	8002fa2 <_free_r+0x46>
 8002f90:	6825      	ldr	r5, [r4, #0]
 8002f92:	1961      	adds	r1, r4, r5
 8002f94:	428b      	cmp	r3, r1
 8002f96:	bf01      	itttt	eq
 8002f98:	6819      	ldreq	r1, [r3, #0]
 8002f9a:	685b      	ldreq	r3, [r3, #4]
 8002f9c:	1949      	addeq	r1, r1, r5
 8002f9e:	6021      	streq	r1, [r4, #0]
 8002fa0:	e7ed      	b.n	8002f7e <_free_r+0x22>
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	b10b      	cbz	r3, 8002fac <_free_r+0x50>
 8002fa8:	42a3      	cmp	r3, r4
 8002faa:	d9fa      	bls.n	8002fa2 <_free_r+0x46>
 8002fac:	6811      	ldr	r1, [r2, #0]
 8002fae:	1855      	adds	r5, r2, r1
 8002fb0:	42a5      	cmp	r5, r4
 8002fb2:	d10b      	bne.n	8002fcc <_free_r+0x70>
 8002fb4:	6824      	ldr	r4, [r4, #0]
 8002fb6:	4421      	add	r1, r4
 8002fb8:	1854      	adds	r4, r2, r1
 8002fba:	42a3      	cmp	r3, r4
 8002fbc:	6011      	str	r1, [r2, #0]
 8002fbe:	d1e0      	bne.n	8002f82 <_free_r+0x26>
 8002fc0:	681c      	ldr	r4, [r3, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	6053      	str	r3, [r2, #4]
 8002fc6:	4421      	add	r1, r4
 8002fc8:	6011      	str	r1, [r2, #0]
 8002fca:	e7da      	b.n	8002f82 <_free_r+0x26>
 8002fcc:	d902      	bls.n	8002fd4 <_free_r+0x78>
 8002fce:	230c      	movs	r3, #12
 8002fd0:	6003      	str	r3, [r0, #0]
 8002fd2:	e7d6      	b.n	8002f82 <_free_r+0x26>
 8002fd4:	6825      	ldr	r5, [r4, #0]
 8002fd6:	1961      	adds	r1, r4, r5
 8002fd8:	428b      	cmp	r3, r1
 8002fda:	bf04      	itt	eq
 8002fdc:	6819      	ldreq	r1, [r3, #0]
 8002fde:	685b      	ldreq	r3, [r3, #4]
 8002fe0:	6063      	str	r3, [r4, #4]
 8002fe2:	bf04      	itt	eq
 8002fe4:	1949      	addeq	r1, r1, r5
 8002fe6:	6021      	streq	r1, [r4, #0]
 8002fe8:	6054      	str	r4, [r2, #4]
 8002fea:	e7ca      	b.n	8002f82 <_free_r+0x26>
 8002fec:	b003      	add	sp, #12
 8002fee:	bd30      	pop	{r4, r5, pc}
 8002ff0:	20000104 	.word	0x20000104

08002ff4 <sbrk_aligned>:
 8002ff4:	b570      	push	{r4, r5, r6, lr}
 8002ff6:	4e0e      	ldr	r6, [pc, #56]	; (8003030 <sbrk_aligned+0x3c>)
 8002ff8:	460c      	mov	r4, r1
 8002ffa:	6831      	ldr	r1, [r6, #0]
 8002ffc:	4605      	mov	r5, r0
 8002ffe:	b911      	cbnz	r1, 8003006 <sbrk_aligned+0x12>
 8003000:	f000 f8bc 	bl	800317c <_sbrk_r>
 8003004:	6030      	str	r0, [r6, #0]
 8003006:	4621      	mov	r1, r4
 8003008:	4628      	mov	r0, r5
 800300a:	f000 f8b7 	bl	800317c <_sbrk_r>
 800300e:	1c43      	adds	r3, r0, #1
 8003010:	d00a      	beq.n	8003028 <sbrk_aligned+0x34>
 8003012:	1cc4      	adds	r4, r0, #3
 8003014:	f024 0403 	bic.w	r4, r4, #3
 8003018:	42a0      	cmp	r0, r4
 800301a:	d007      	beq.n	800302c <sbrk_aligned+0x38>
 800301c:	1a21      	subs	r1, r4, r0
 800301e:	4628      	mov	r0, r5
 8003020:	f000 f8ac 	bl	800317c <_sbrk_r>
 8003024:	3001      	adds	r0, #1
 8003026:	d101      	bne.n	800302c <sbrk_aligned+0x38>
 8003028:	f04f 34ff 	mov.w	r4, #4294967295
 800302c:	4620      	mov	r0, r4
 800302e:	bd70      	pop	{r4, r5, r6, pc}
 8003030:	20000108 	.word	0x20000108

08003034 <_malloc_r>:
 8003034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003038:	1ccd      	adds	r5, r1, #3
 800303a:	f025 0503 	bic.w	r5, r5, #3
 800303e:	3508      	adds	r5, #8
 8003040:	2d0c      	cmp	r5, #12
 8003042:	bf38      	it	cc
 8003044:	250c      	movcc	r5, #12
 8003046:	2d00      	cmp	r5, #0
 8003048:	4607      	mov	r7, r0
 800304a:	db01      	blt.n	8003050 <_malloc_r+0x1c>
 800304c:	42a9      	cmp	r1, r5
 800304e:	d905      	bls.n	800305c <_malloc_r+0x28>
 8003050:	230c      	movs	r3, #12
 8003052:	603b      	str	r3, [r7, #0]
 8003054:	2600      	movs	r6, #0
 8003056:	4630      	mov	r0, r6
 8003058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800305c:	4e2e      	ldr	r6, [pc, #184]	; (8003118 <_malloc_r+0xe4>)
 800305e:	f000 f89d 	bl	800319c <__malloc_lock>
 8003062:	6833      	ldr	r3, [r6, #0]
 8003064:	461c      	mov	r4, r3
 8003066:	bb34      	cbnz	r4, 80030b6 <_malloc_r+0x82>
 8003068:	4629      	mov	r1, r5
 800306a:	4638      	mov	r0, r7
 800306c:	f7ff ffc2 	bl	8002ff4 <sbrk_aligned>
 8003070:	1c43      	adds	r3, r0, #1
 8003072:	4604      	mov	r4, r0
 8003074:	d14d      	bne.n	8003112 <_malloc_r+0xde>
 8003076:	6834      	ldr	r4, [r6, #0]
 8003078:	4626      	mov	r6, r4
 800307a:	2e00      	cmp	r6, #0
 800307c:	d140      	bne.n	8003100 <_malloc_r+0xcc>
 800307e:	6823      	ldr	r3, [r4, #0]
 8003080:	4631      	mov	r1, r6
 8003082:	4638      	mov	r0, r7
 8003084:	eb04 0803 	add.w	r8, r4, r3
 8003088:	f000 f878 	bl	800317c <_sbrk_r>
 800308c:	4580      	cmp	r8, r0
 800308e:	d13a      	bne.n	8003106 <_malloc_r+0xd2>
 8003090:	6821      	ldr	r1, [r4, #0]
 8003092:	3503      	adds	r5, #3
 8003094:	1a6d      	subs	r5, r5, r1
 8003096:	f025 0503 	bic.w	r5, r5, #3
 800309a:	3508      	adds	r5, #8
 800309c:	2d0c      	cmp	r5, #12
 800309e:	bf38      	it	cc
 80030a0:	250c      	movcc	r5, #12
 80030a2:	4629      	mov	r1, r5
 80030a4:	4638      	mov	r0, r7
 80030a6:	f7ff ffa5 	bl	8002ff4 <sbrk_aligned>
 80030aa:	3001      	adds	r0, #1
 80030ac:	d02b      	beq.n	8003106 <_malloc_r+0xd2>
 80030ae:	6823      	ldr	r3, [r4, #0]
 80030b0:	442b      	add	r3, r5
 80030b2:	6023      	str	r3, [r4, #0]
 80030b4:	e00e      	b.n	80030d4 <_malloc_r+0xa0>
 80030b6:	6822      	ldr	r2, [r4, #0]
 80030b8:	1b52      	subs	r2, r2, r5
 80030ba:	d41e      	bmi.n	80030fa <_malloc_r+0xc6>
 80030bc:	2a0b      	cmp	r2, #11
 80030be:	d916      	bls.n	80030ee <_malloc_r+0xba>
 80030c0:	1961      	adds	r1, r4, r5
 80030c2:	42a3      	cmp	r3, r4
 80030c4:	6025      	str	r5, [r4, #0]
 80030c6:	bf18      	it	ne
 80030c8:	6059      	strne	r1, [r3, #4]
 80030ca:	6863      	ldr	r3, [r4, #4]
 80030cc:	bf08      	it	eq
 80030ce:	6031      	streq	r1, [r6, #0]
 80030d0:	5162      	str	r2, [r4, r5]
 80030d2:	604b      	str	r3, [r1, #4]
 80030d4:	4638      	mov	r0, r7
 80030d6:	f104 060b 	add.w	r6, r4, #11
 80030da:	f000 f865 	bl	80031a8 <__malloc_unlock>
 80030de:	f026 0607 	bic.w	r6, r6, #7
 80030e2:	1d23      	adds	r3, r4, #4
 80030e4:	1af2      	subs	r2, r6, r3
 80030e6:	d0b6      	beq.n	8003056 <_malloc_r+0x22>
 80030e8:	1b9b      	subs	r3, r3, r6
 80030ea:	50a3      	str	r3, [r4, r2]
 80030ec:	e7b3      	b.n	8003056 <_malloc_r+0x22>
 80030ee:	6862      	ldr	r2, [r4, #4]
 80030f0:	42a3      	cmp	r3, r4
 80030f2:	bf0c      	ite	eq
 80030f4:	6032      	streq	r2, [r6, #0]
 80030f6:	605a      	strne	r2, [r3, #4]
 80030f8:	e7ec      	b.n	80030d4 <_malloc_r+0xa0>
 80030fa:	4623      	mov	r3, r4
 80030fc:	6864      	ldr	r4, [r4, #4]
 80030fe:	e7b2      	b.n	8003066 <_malloc_r+0x32>
 8003100:	4634      	mov	r4, r6
 8003102:	6876      	ldr	r6, [r6, #4]
 8003104:	e7b9      	b.n	800307a <_malloc_r+0x46>
 8003106:	230c      	movs	r3, #12
 8003108:	603b      	str	r3, [r7, #0]
 800310a:	4638      	mov	r0, r7
 800310c:	f000 f84c 	bl	80031a8 <__malloc_unlock>
 8003110:	e7a1      	b.n	8003056 <_malloc_r+0x22>
 8003112:	6025      	str	r5, [r4, #0]
 8003114:	e7de      	b.n	80030d4 <_malloc_r+0xa0>
 8003116:	bf00      	nop
 8003118:	20000104 	.word	0x20000104

0800311c <_realloc_r>:
 800311c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003120:	4680      	mov	r8, r0
 8003122:	4614      	mov	r4, r2
 8003124:	460e      	mov	r6, r1
 8003126:	b921      	cbnz	r1, 8003132 <_realloc_r+0x16>
 8003128:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800312c:	4611      	mov	r1, r2
 800312e:	f7ff bf81 	b.w	8003034 <_malloc_r>
 8003132:	b92a      	cbnz	r2, 8003140 <_realloc_r+0x24>
 8003134:	f7ff ff12 	bl	8002f5c <_free_r>
 8003138:	4625      	mov	r5, r4
 800313a:	4628      	mov	r0, r5
 800313c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003140:	f000 f838 	bl	80031b4 <_malloc_usable_size_r>
 8003144:	4284      	cmp	r4, r0
 8003146:	4607      	mov	r7, r0
 8003148:	d802      	bhi.n	8003150 <_realloc_r+0x34>
 800314a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800314e:	d812      	bhi.n	8003176 <_realloc_r+0x5a>
 8003150:	4621      	mov	r1, r4
 8003152:	4640      	mov	r0, r8
 8003154:	f7ff ff6e 	bl	8003034 <_malloc_r>
 8003158:	4605      	mov	r5, r0
 800315a:	2800      	cmp	r0, #0
 800315c:	d0ed      	beq.n	800313a <_realloc_r+0x1e>
 800315e:	42bc      	cmp	r4, r7
 8003160:	4622      	mov	r2, r4
 8003162:	4631      	mov	r1, r6
 8003164:	bf28      	it	cs
 8003166:	463a      	movcs	r2, r7
 8003168:	f7ff fed0 	bl	8002f0c <memcpy>
 800316c:	4631      	mov	r1, r6
 800316e:	4640      	mov	r0, r8
 8003170:	f7ff fef4 	bl	8002f5c <_free_r>
 8003174:	e7e1      	b.n	800313a <_realloc_r+0x1e>
 8003176:	4635      	mov	r5, r6
 8003178:	e7df      	b.n	800313a <_realloc_r+0x1e>
	...

0800317c <_sbrk_r>:
 800317c:	b538      	push	{r3, r4, r5, lr}
 800317e:	4d06      	ldr	r5, [pc, #24]	; (8003198 <_sbrk_r+0x1c>)
 8003180:	2300      	movs	r3, #0
 8003182:	4604      	mov	r4, r0
 8003184:	4608      	mov	r0, r1
 8003186:	602b      	str	r3, [r5, #0]
 8003188:	f7fd fc9a 	bl	8000ac0 <_sbrk>
 800318c:	1c43      	adds	r3, r0, #1
 800318e:	d102      	bne.n	8003196 <_sbrk_r+0x1a>
 8003190:	682b      	ldr	r3, [r5, #0]
 8003192:	b103      	cbz	r3, 8003196 <_sbrk_r+0x1a>
 8003194:	6023      	str	r3, [r4, #0]
 8003196:	bd38      	pop	{r3, r4, r5, pc}
 8003198:	2000010c 	.word	0x2000010c

0800319c <__malloc_lock>:
 800319c:	4801      	ldr	r0, [pc, #4]	; (80031a4 <__malloc_lock+0x8>)
 800319e:	f000 b811 	b.w	80031c4 <__retarget_lock_acquire_recursive>
 80031a2:	bf00      	nop
 80031a4:	20000110 	.word	0x20000110

080031a8 <__malloc_unlock>:
 80031a8:	4801      	ldr	r0, [pc, #4]	; (80031b0 <__malloc_unlock+0x8>)
 80031aa:	f000 b80c 	b.w	80031c6 <__retarget_lock_release_recursive>
 80031ae:	bf00      	nop
 80031b0:	20000110 	.word	0x20000110

080031b4 <_malloc_usable_size_r>:
 80031b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031b8:	1f18      	subs	r0, r3, #4
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	bfbc      	itt	lt
 80031be:	580b      	ldrlt	r3, [r1, r0]
 80031c0:	18c0      	addlt	r0, r0, r3
 80031c2:	4770      	bx	lr

080031c4 <__retarget_lock_acquire_recursive>:
 80031c4:	4770      	bx	lr

080031c6 <__retarget_lock_release_recursive>:
 80031c6:	4770      	bx	lr

080031c8 <_init>:
 80031c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ca:	bf00      	nop
 80031cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ce:	bc08      	pop	{r3}
 80031d0:	469e      	mov	lr, r3
 80031d2:	4770      	bx	lr

080031d4 <_fini>:
 80031d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031d6:	bf00      	nop
 80031d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031da:	bc08      	pop	{r3}
 80031dc:	469e      	mov	lr, r3
 80031de:	4770      	bx	lr
